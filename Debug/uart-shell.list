
uart-shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004834  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004dac  08004dac  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dac  08004dac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004e10  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004e10  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d468  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ef  00000000  00000000  0002d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6c  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a8e  00000000  00000000  00030ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001057c  00000000  00000000  00049a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f49b  00000000  00000000  0005a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f84  00000000  00000000  000e94a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ed428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004928 	.word	0x08004928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004928 	.word	0x08004928

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000182:	4a19      	ldr	r2, [pc, #100]	; (80001e8 <MX_ADC1_Init+0x78>)
 8000184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <MX_ADC1_Init+0x74>)
 800018e:	2200      	movs	r2, #0
 8000190:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <MX_ADC1_Init+0x74>)
 8000194:	2200      	movs	r2, #0
 8000196:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <MX_ADC1_Init+0x74>)
 800019a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800019e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80001a6:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ae:	f000 fde5 	bl	8000d7c <HAL_ADC_Init>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d001      	beq.n	80001bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001b8:	f000 fb8a 	bl	80008d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001bc:	2300      	movs	r3, #0
 80001be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001c0:	2301      	movs	r3, #1
 80001c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <MX_ADC1_Init+0x74>)
 80001ce:	f001 f86d 	bl	80012ac <HAL_ADC_ConfigChannel>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d001      	beq.n	80001dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001d8:	f000 fb7a 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001dc:	bf00      	nop
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000078 	.word	0x20000078
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <HAL_ADC_MspInit+0x6c>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d121      	bne.n	8000250 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <HAL_ADC_MspInit+0x70>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a0c      	ldr	r2, [pc, #48]	; (800025c <HAL_ADC_MspInit+0x70>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_ADC_MspInit+0x70>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023c:	2301      	movs	r3, #1
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <HAL_ADC_MspInit+0x74>)
 800024c:	f001 fad0 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40012400 	.word	0x40012400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000278:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <MX_GPIO_Init+0xcc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a2c      	ldr	r2, [pc, #176]	; (8000330 <MX_GPIO_Init+0xcc>)
 800027e:	f043 0310 	orr.w	r3, r3, #16
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b2a      	ldr	r3, [pc, #168]	; (8000330 <MX_GPIO_Init+0xcc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0310 	and.w	r3, r3, #16
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <MX_GPIO_Init+0xcc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a26      	ldr	r2, [pc, #152]	; (8000330 <MX_GPIO_Init+0xcc>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b24      	ldr	r3, [pc, #144]	; (8000330 <MX_GPIO_Init+0xcc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2120      	movs	r1, #32
 80002dc:	4815      	ldr	r0, [pc, #84]	; (8000334 <MX_GPIO_Init+0xd0>)
 80002de:	f001 fc22 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <MX_GPIO_Init+0xd4>)
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	4811      	ldr	r0, [pc, #68]	; (800033c <MX_GPIO_Init+0xd8>)
 80002f8:	f001 fa7a 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002fc:	2320      	movs	r3, #32
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000300:	2301      	movs	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2302      	movs	r3, #2
 800030a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	4619      	mov	r1, r3
 8000312:	4808      	ldr	r0, [pc, #32]	; (8000334 <MX_GPIO_Init+0xd0>)
 8000314:	f001 fa6c 	bl	80017f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2100      	movs	r1, #0
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f001 fa30 	bl	8001782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000322:	2028      	movs	r0, #40	; 0x28
 8000324:	f001 fa49 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800
 8000338:	10110000 	.word	0x10110000
 800033c:	40011000 	.word	0x40011000

08000340 <main>:

// Helper functions
GPIO_TypeDef* get_port_from_pin(char *pin, uint16_t *pin_num);

int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    HAL_Init();
 8000344:	f000 fcb8 	bl	8000cb8 <HAL_Init>
    SystemClock_Config();
 8000348:	f000 fa6c 	bl	8000824 <SystemClock_Config>
    MX_GPIO_Init();
 800034c:	f7ff ff8a 	bl	8000264 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000350:	f000 fc24 	bl	8000b9c <MX_USART2_UART_Init>
    MX_ADC1_Init();
 8000354:	f7ff ff0c 	bl	8000170 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000358:	f000 fb5e 	bl	8000a18 <MX_TIM2_Init>

    // Start UART in interrupt mode
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_buffer[uart_index], 1);
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <main+0x74>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	461a      	mov	r2, r3
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <main+0x78>)
 8000366:	4413      	add	r3, r2
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <main+0x7c>)
 800036e:	f003 f80c 	bl	800338a <HAL_UART_Receive_IT>

    while (1)
    {
        if (command_received)
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <main+0x80>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0fa      	beq.n	8000372 <main+0x32>
        {
            uart_buffer[uart_index] = '\0';  // Null-terminate the received command
 800037c:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <main+0x74>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <main+0x78>)
 8000386:	2100      	movs	r1, #0
 8000388:	5499      	strb	r1, [r3, r2]
            handle_command((char *)uart_buffer);
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <main+0x78>)
 800038c:	f000 f81a 	bl	80003c4 <handle_command>
            uart_index = 0;  // Reset index for the next command
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <main+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
            command_received = 0;
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <main+0x80>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_buffer[uart_index], 1);  // Restart UART reception
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <main+0x74>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <main+0x78>)
 80003a6:	4413      	add	r3, r2
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	4803      	ldr	r0, [pc, #12]	; (80003bc <main+0x7c>)
 80003ae:	f002 ffec 	bl	800338a <HAL_UART_Receive_IT>
        if (command_received)
 80003b2:	e7de      	b.n	8000372 <main+0x32>
 80003b4:	2000010c 	.word	0x2000010c
 80003b8:	200000a8 	.word	0x200000a8
 80003bc:	2000015c 	.word	0x2000015c
 80003c0:	2000010d 	.word	0x2000010d

080003c4 <handle_command>:
        }
    }
}

void handle_command(char *cmd)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    char command[20];
    sscanf(cmd, "%s", command);  // Extract command from the input string
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	461a      	mov	r2, r3
 80003d2:	4952      	ldr	r1, [pc, #328]	; (800051c <handle_command+0x158>)
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f003 f953 	bl	8003680 <siscanf>

    if (strcmp(command, "help") == 0)
 80003da:	f107 030c 	add.w	r3, r7, #12
 80003de:	4950      	ldr	r1, [pc, #320]	; (8000520 <handle_command+0x15c>)
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff feb3 	bl	800014c <strcmp>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <handle_command+0x2e>
    {
        help_command();
 80003ec:	f000 f9fe 	bl	80007ec <help_command>
    }
    else
    {
        send_response("Unknown command\r\n");
    }
}
 80003f0:	e08f      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "clear") == 0)
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	494b      	ldr	r1, [pc, #300]	; (8000524 <handle_command+0x160>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff fea7 	bl	800014c <strcmp>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <handle_command+0x46>
        clear_command();
 8000404:	f000 fa00 	bl	8000808 <clear_command>
}
 8000408:	e083      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "set_pin") == 0)
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4946      	ldr	r1, [pc, #280]	; (8000528 <handle_command+0x164>)
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fe9b 	bl	800014c <strcmp>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10b      	bne.n	8000434 <handle_command+0x70>
        set_pin_command(cmd + strlen(command));
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fe9d 	bl	8000160 <strlen>
 8000426:	4602      	mov	r2, r0
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f8c3 	bl	80005b8 <set_pin_command>
}
 8000432:	e06e      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "get_pin") == 0)
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	493c      	ldr	r1, [pc, #240]	; (800052c <handle_command+0x168>)
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fe86 	bl	800014c <strcmp>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10b      	bne.n	800045e <handle_command+0x9a>
        get_pin_command(cmd + strlen(command));
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe88 	bl	8000160 <strlen>
 8000450:	4602      	mov	r2, r0
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f8e2 	bl	8000620 <get_pin_command>
}
 800045c:	e059      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "toggle_pin") == 0)
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	4933      	ldr	r1, [pc, #204]	; (8000530 <handle_command+0x16c>)
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fe71 	bl	800014c <strcmp>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d10b      	bne.n	8000488 <handle_command+0xc4>
        toggle_pin_command(cmd + strlen(command));
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe73 	bl	8000160 <strlen>
 800047a:	4602      	mov	r2, r0
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4413      	add	r3, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f907 	bl	8000694 <toggle_pin_command>
}
 8000486:	e044      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "read_adc") == 0)
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4929      	ldr	r1, [pc, #164]	; (8000534 <handle_command+0x170>)
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff fe5c 	bl	800014c <strcmp>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d10b      	bne.n	80004b2 <handle_command+0xee>
        read_adc_command(cmd + strlen(command));
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe5e 	bl	8000160 <strlen>
 80004a4:	4602      	mov	r2, r0
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f920 	bl	80006f0 <read_adc_command>
}
 80004b0:	e02f      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "get_info") == 0)
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	4920      	ldr	r1, [pc, #128]	; (8000538 <handle_command+0x174>)
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe47 	bl	800014c <strcmp>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <handle_command+0x106>
        get_info_command();
 80004c4:	f000 f954 	bl	8000770 <get_info_command>
}
 80004c8:	e023      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "start_timer") == 0)
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	491b      	ldr	r1, [pc, #108]	; (800053c <handle_command+0x178>)
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe3b 	bl	800014c <strcmp>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d10b      	bne.n	80004f4 <handle_command+0x130>
        start_timer_command(cmd + strlen(command));
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe3d 	bl	8000160 <strlen>
 80004e6:	4602      	mov	r2, r0
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f949 	bl	8000784 <start_timer_command>
}
 80004f2:	e00e      	b.n	8000512 <handle_command+0x14e>
    else if (strcmp(command, "stop_timer") == 0)
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4911      	ldr	r1, [pc, #68]	; (8000540 <handle_command+0x17c>)
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe26 	bl	800014c <strcmp>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d102      	bne.n	800050c <handle_command+0x148>
        stop_timer_command();
 8000506:	f000 f963 	bl	80007d0 <stop_timer_command>
}
 800050a:	e002      	b.n	8000512 <handle_command+0x14e>
        send_response("Unknown command\r\n");
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <handle_command+0x180>)
 800050e:	f000 f81b 	bl	8000548 <send_response>
}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	08004940 	.word	0x08004940
 8000520:	08004944 	.word	0x08004944
 8000524:	0800494c 	.word	0x0800494c
 8000528:	08004954 	.word	0x08004954
 800052c:	0800495c 	.word	0x0800495c
 8000530:	08004964 	.word	0x08004964
 8000534:	08004970 	.word	0x08004970
 8000538:	0800497c 	.word	0x0800497c
 800053c:	08004988 	.word	0x08004988
 8000540:	08004994 	.word	0x08004994
 8000544:	080049a0 	.word	0x080049a0

08000548 <send_response>:

void send_response(char *response)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff fe05 	bl	8000160 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	b29a      	uxth	r2, r3
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <send_response+0x28>)
 8000562:	f002 fe8f 	bl	8003284 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000015c 	.word	0x2000015c

08000574 <get_port_from_pin>:

// GPIO Commands
GPIO_TypeDef* get_port_from_pin(char *pin, uint16_t *pin_num)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
    if (strncmp(pin, "PA", 2) == 0)
 800057e:	2202      	movs	r2, #2
 8000580:	490b      	ldr	r1, [pc, #44]	; (80005b0 <get_port_from_pin+0x3c>)
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f003 f8b0 	bl	80036e8 <strncmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10b      	bne.n	80005a6 <get_port_from_pin+0x32>
    {
        *pin_num = 1 << (pin[2] - '0');
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	3b30      	subs	r3, #48	; 0x30
 8000596:	2201      	movs	r2, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	b29a      	uxth	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	801a      	strh	r2, [r3, #0]
        return GPIOA;
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <get_port_from_pin+0x40>)
 80005a4:	e000      	b.n	80005a8 <get_port_from_pin+0x34>
    }
    // Add additional ports as needed (e.g., GPIOB, GPIOC)
    return NULL;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080049b4 	.word	0x080049b4
 80005b4:	40010800 	.word	0x40010800

080005b8 <set_pin_command>:

void set_pin_command(char *args)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    char pin[4];
    int state;
    sscanf(args, "%s %d", pin, &state);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	f107 0210 	add.w	r2, r7, #16
 80005c8:	4912      	ldr	r1, [pc, #72]	; (8000614 <set_pin_command+0x5c>)
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f003 f858 	bl	8003680 <siscanf>

    uint16_t pin_num;
    GPIO_TypeDef *port = get_port_from_pin(pin, &pin_num);
 80005d0:	f107 020a 	add.w	r2, r7, #10
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffca 	bl	8000574 <get_port_from_pin>
 80005e0:	6178      	str	r0, [r7, #20]

    if (port != NULL)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00e      	beq.n	8000606 <set_pin_command+0x4e>
    {
        HAL_GPIO_WritePin(port, pin_num, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005e8:	8979      	ldrh	r1, [r7, #10]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	6978      	ldr	r0, [r7, #20]
 80005fa:	f001 fa94 	bl	8001b26 <HAL_GPIO_WritePin>
        send_response("Pin set successfully\r\n");
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <set_pin_command+0x60>)
 8000600:	f7ff ffa2 	bl	8000548 <send_response>
    }
    else
    {
        send_response("Invalid pin\r\n");
    }
}
 8000604:	e002      	b.n	800060c <set_pin_command+0x54>
        send_response("Invalid pin\r\n");
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <set_pin_command+0x64>)
 8000608:	f7ff ff9e 	bl	8000548 <send_response>
}
 800060c:	bf00      	nop
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	080049b8 	.word	0x080049b8
 8000618:	080049c0 	.word	0x080049c0
 800061c:	080049d8 	.word	0x080049d8

08000620 <get_pin_command>:

void get_pin_command(char *args)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	; 0x38
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    char pin[4];
    sscanf(args, "%s", pin);
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	461a      	mov	r2, r3
 800062e:	4916      	ldr	r1, [pc, #88]	; (8000688 <get_pin_command+0x68>)
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f003 f825 	bl	8003680 <siscanf>

    uint16_t pin_num;
    GPIO_TypeDef *port = get_port_from_pin(pin, &pin_num);
 8000636:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800063a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff97 	bl	8000574 <get_port_from_pin>
 8000646:	6378      	str	r0, [r7, #52]	; 0x34

    if (port != NULL)
 8000648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800064a:	2b00      	cmp	r3, #0
 800064c:	d015      	beq.n	800067a <get_pin_command+0x5a>
    {
        GPIO_PinState pin_state = HAL_GPIO_ReadPin(port, pin_num);
 800064e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000650:	4619      	mov	r1, r3
 8000652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000654:	f001 fa50 	bl	8001af8 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        char response[32];
        sprintf(response, "Pin state: %d\r\n", pin_state);
 800065e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4909      	ldr	r1, [pc, #36]	; (800068c <get_pin_command+0x6c>)
 8000668:	4618      	mov	r0, r3
 800066a:	f002 ffe9 	bl	8003640 <siprintf>
        send_response(response);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff68 	bl	8000548 <send_response>
    }
    else
    {
        send_response("Invalid pin\r\n");
    }
}
 8000678:	e002      	b.n	8000680 <get_pin_command+0x60>
        send_response("Invalid pin\r\n");
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <get_pin_command+0x70>)
 800067c:	f7ff ff64 	bl	8000548 <send_response>
}
 8000680:	bf00      	nop
 8000682:	3738      	adds	r7, #56	; 0x38
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08004940 	.word	0x08004940
 800068c:	080049e8 	.word	0x080049e8
 8000690:	080049d8 	.word	0x080049d8

08000694 <toggle_pin_command>:

void toggle_pin_command(char *args)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    char pin[4];
    sscanf(args, "%s", pin);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	461a      	mov	r2, r3
 80006a2:	4910      	ldr	r1, [pc, #64]	; (80006e4 <toggle_pin_command+0x50>)
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f002 ffeb 	bl	8003680 <siscanf>

    uint16_t pin_num;
    GPIO_TypeDef *port = get_port_from_pin(pin, &pin_num);
 80006aa:	f107 020e 	add.w	r2, r7, #14
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff5d 	bl	8000574 <get_port_from_pin>
 80006ba:	6178      	str	r0, [r7, #20]

    if (port != NULL)
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <toggle_pin_command+0x40>
    {
        HAL_GPIO_TogglePin(port, pin_num);
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	4619      	mov	r1, r3
 80006c6:	6978      	ldr	r0, [r7, #20]
 80006c8:	f001 fa45 	bl	8001b56 <HAL_GPIO_TogglePin>
        send_response("Pin toggled successfully\r\n");
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <toggle_pin_command+0x54>)
 80006ce:	f7ff ff3b 	bl	8000548 <send_response>
    }
    else
    {
        send_response("Invalid pin\r\n");
    }
}
 80006d2:	e002      	b.n	80006da <toggle_pin_command+0x46>
        send_response("Invalid pin\r\n");
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <toggle_pin_command+0x58>)
 80006d6:	f7ff ff37 	bl	8000548 <send_response>
}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08004940 	.word	0x08004940
 80006e8:	080049f8 	.word	0x080049f8
 80006ec:	080049d8 	.word	0x080049d8

080006f0 <read_adc_command>:

// ADC Command
void read_adc_command(char *args)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	; 0x40
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    int channel;
    sscanf(args, "%d", &channel);
 80006f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fc:	461a      	mov	r2, r3
 80006fe:	4919      	ldr	r1, [pc, #100]	; (8000764 <read_adc_command+0x74>)
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f002 ffbd 	bl	8003680 <siscanf>

    ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
    sConfig.Channel = channel;
 8000712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000716:	2301      	movs	r3, #1
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800071e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <read_adc_command+0x78>)
 8000726:	f000 fdc1 	bl	80012ac <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 800072a:	480f      	ldr	r0, [pc, #60]	; (8000768 <read_adc_command+0x78>)
 800072c:	f000 fbfe 	bl	8000f2c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <read_adc_command+0x78>)
 8000736:	f000 fca7 	bl	8001088 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <read_adc_command+0x78>)
 800073c:	f000 fdaa 	bl	8001294 <HAL_ADC_GetValue>
 8000740:	63f8      	str	r0, [r7, #60]	; 0x3c

    char response[32];
    sprintf(response, "ADC Value: %lu\r\n", adc_value);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <read_adc_command+0x7c>)
 800074a:	4618      	mov	r0, r3
 800074c:	f002 ff78 	bl	8003640 <siprintf>
    send_response(response);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fef7 	bl	8000548 <send_response>
}
 800075a:	bf00      	nop
 800075c:	3740      	adds	r7, #64	; 0x40
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08004a14 	.word	0x08004a14
 8000768:	20000078 	.word	0x20000078
 800076c:	08004a18 	.word	0x08004a18

08000770 <get_info_command>:

// System Info Command
void get_info_command(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    send_response("STM32 UART Shell v1.0\r\n");
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <get_info_command+0x10>)
 8000776:	f7ff fee7 	bl	8000548 <send_response>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08004a2c 	.word	0x08004a2c

08000784 <start_timer_command>:

// Timer Commands
void start_timer_command(char *args)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    int period;
    sscanf(args, "%d", &period);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	461a      	mov	r2, r3
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <start_timer_command+0x40>)
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f002 ff73 	bl	8003680 <siscanf>
    __HAL_TIM_SET_AUTORELOAD(&htim2, period - 1);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <start_timer_command+0x44>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <start_timer_command+0x44>)
 80007ac:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start_IT(&htim2);
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <start_timer_command+0x44>)
 80007b0:	f001 ffd8 	bl	8002764 <HAL_TIM_Base_Start_IT>
    send_response("Timer started\r\n");
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <start_timer_command+0x48>)
 80007b6:	f7ff fec7 	bl	8000548 <send_response>
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08004a14 	.word	0x08004a14
 80007c8:	20000114 	.word	0x20000114
 80007cc:	08004a44 	.word	0x08004a44

080007d0 <stop_timer_command>:

void stop_timer_command(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop_IT(&htim2);
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <stop_timer_command+0x14>)
 80007d6:	f002 f817 	bl	8002808 <HAL_TIM_Base_Stop_IT>
    send_response("Timer stopped\r\n");
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <stop_timer_command+0x18>)
 80007dc:	f7ff feb4 	bl	8000548 <send_response>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000114 	.word	0x20000114
 80007e8:	08004a54 	.word	0x08004a54

080007ec <help_command>:

// Help Command
void help_command(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
    const char *help_text = "Available commands:\r\n"
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <help_command+0x18>)
 80007f4:	607b      	str	r3, [r7, #4]
                            "toggle_pin <pin> - Toggle GPIO pin\r\n"
                            "read_adc <channel> - Read ADC value from channel\r\n"
                            "get_info        - Get system information\r\n"
                            "start_timer <period> - Start a timer with the given period (ms)\r\n"
                            "stop_timer      - Stop the timer\r\n";
    send_response((char *)help_text);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fea6 	bl	8000548 <send_response>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08004a64 	.word	0x08004a64

08000808 <clear_command>:

// Clear Command
void clear_command(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
    const char *clear_text = "\033[H\033[J";  // ANSI escape code to clear terminal
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <clear_command+0x18>)
 8000810:	607b      	str	r3, [r7, #4]
    send_response((char *)clear_text);
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fe98 	bl	8000548 <send_response>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08004c08 	.word	0x08004c08

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	2228      	movs	r2, #40	; 0x28
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f002 ff50 	bl	80036d8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000864:	2300      	movs	r3, #0
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000868:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f9aa 	bl	8001bcc <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x5e>
    {
        Error_Handler();
 800087e:	f000 f827 	bl	80008d0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	617b      	str	r3, [r7, #20]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000892:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2102      	movs	r1, #2
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fc16 	bl	80020d0 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x8a>
    {
        Error_Handler();
 80008aa:	f000 f811 	bl	80008d0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ae:	2302      	movs	r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fd97 	bl	80023ec <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xa4>
    {
        Error_Handler();
 80008c4:	f000 f804 	bl	80008d0 <Error_Handler>
    }
}
 80008c8:	bf00      	nop
 80008ca:	3750      	adds	r7, #80	; 0x50
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
    __disable_irq();
    while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr

08000982 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000986:	f000 f9dd 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000992:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000996:	f001 f8f7 	bl	8001b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f002 fe9c 	bl	800370c <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20005000 	.word	0x20005000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	20000110 	.word	0x20000110
 8000a08:	200002f0 	.word	0x200002f0

08000a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	; 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a70:	4823      	ldr	r0, [pc, #140]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a72:	f001 fe27 	bl	80026c4 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a7c:	f7ff ff28 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a8e:	f002 f803 	bl	8002a98 <HAL_TIM_ConfigClockSource>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a98:	f7ff ff1a 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9c:	4818      	ldr	r0, [pc, #96]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000a9e:	f001 fee1 	bl	8002864 <HAL_TIM_PWM_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000aa8:	f7ff ff12 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000abc:	f002 fb34 	bl	8003128 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ac6:	f7ff ff03 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aca:	2360      	movs	r3, #96	; 0x60
 8000acc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2204      	movs	r2, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000ae2:	f001 ff17 	bl	8002914 <HAL_TIM_PWM_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000aec:	f7ff fef0 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM2_Init+0xe8>)
 8000af2:	f000 f823 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000af6:	bf00      	nop
 8000af8:	3738      	adds	r7, #56	; 0x38
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000114 	.word	0x20000114

08000b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d10b      	bne.n	8000b2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_TIM_Base_MspInit+0x34>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5a:	d117      	bne.n	8000b8c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_TIM_MspPostInit+0x58>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <HAL_TIM_MspPostInit+0x58>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_TIM_MspPostInit+0x58>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b74:	2302      	movs	r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <HAL_TIM_MspPostInit+0x5c>)
 8000b88:	f000 fe32 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010800 	.word	0x40010800

08000b9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f002 fb06 	bl	80031e4 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f7ff fe77 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000015c 	.word	0x2000015c
 8000bec:	40004400 	.word	0x40004400

08000bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x70>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d123      	bne.n	8000c58 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1a:	61d3      	str	r3, [r2, #28]
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_UART_MspInit+0x74>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c40:	230c      	movs	r3, #12
 8000c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x78>)
 8000c54:	f000 fdcc 	bl	80017f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff fece 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c72:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c88:	4c09      	ldr	r4, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 fd3f 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fb51 	bl	8000340 <main>
  bx lr
 8000c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ca8:	08004db4 	.word	0x08004db4
  ldr r2, =_sbss
 8000cac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cb0:	200002f0 	.word	0x200002f0

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x28>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fd4f 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe02 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fd67 	bl	80017d6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 fd2f 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	200001a4 	.word	0x200001a4

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	200001a4 	.word	0x200001a4

08000d7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0be      	b.n	8000f1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fa16 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 fbc5 	bl	8001550 <ADC_ConversionStop_Disable>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8099 	bne.w	8000f0a <HAL_ADC_Init+0x18e>
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 8095 	bne.w	8000f0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de8:	f023 0302 	bic.w	r3, r3, #2
 8000dec:	f043 0202 	orr.w	r2, r3, #2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7b1b      	ldrb	r3, [r3, #12]
 8000e02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e14:	d003      	beq.n	8000e1e <HAL_ADC_Init+0xa2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <HAL_ADC_Init+0xa8>
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	e000      	b.n	8000e26 <HAL_ADC_Init+0xaa>
 8000e24:	2300      	movs	r3, #0
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7d1b      	ldrb	r3, [r3, #20]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d119      	bne.n	8000e68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7b1b      	ldrb	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d109      	bne.n	8000e50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	035a      	lsls	r2, r3, #13
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	e00b      	b.n	8000e68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	f043 0220 	orr.w	r2, r3, #32
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_ADC_Init+0x1a8>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e98:	d003      	beq.n	8000ea2 <HAL_ADC_Init+0x126>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d104      	bne.n	8000eac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	051b      	lsls	r3, r3, #20
 8000eaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_ADC_Init+0x1ac>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10b      	bne.n	8000ee8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	f023 0303 	bic.w	r3, r3, #3
 8000ede:	f043 0201 	orr.w	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ee6:	e018      	b.n	8000f1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f023 0312 	bic.w	r3, r3, #18
 8000ef0:	f043 0210 	orr.w	r2, r3, #16
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f08:	e007      	b.n	8000f1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f043 0210 	orr.w	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	ffe1f7fd 	.word	0xffe1f7fd
 8000f28:	ff1f0efe 	.word	0xff1f0efe

08000f2c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x1a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e098      	b.n	8001078 <HAL_ADC_Start+0x14c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 faa4 	bl	800149c <ADC_Enable>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8087 	bne.w	800106e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f68:	f023 0301 	bic.w	r3, r3, #1
 8000f6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a41      	ldr	r2, [pc, #260]	; (8001080 <HAL_ADC_Start+0x154>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d105      	bne.n	8000f8a <HAL_ADC_Start+0x5e>
 8000f7e:	4b41      	ldr	r3, [pc, #260]	; (8001084 <HAL_ADC_Start+0x158>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d115      	bne.n	8000fb6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d026      	beq.n	8000ff2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb4:	e01d      	b.n	8000ff2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_ADC_Start+0x158>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d004      	beq.n	8000fd6 <HAL_ADC_Start+0xaa>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2b      	ldr	r2, [pc, #172]	; (8001080 <HAL_ADC_Start+0x154>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_ADC_Start+0xc6>
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_ADC_Start+0x158>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	f023 0206 	bic.w	r2, r3, #6
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
 800100a:	e002      	b.n	8001012 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f06f 0202 	mvn.w	r2, #2
 8001022:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800102e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001032:	d113      	bne.n	800105c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_ADC_Start+0x154>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d105      	bne.n	800104a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_ADC_Start+0x158>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001046:	2b00      	cmp	r3, #0
 8001048:	d108      	bne.n	800105c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	e00c      	b.n	8001076 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	e003      	b.n	8001076 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40012800 	.word	0x40012800
 8001084:	40012400 	.word	0x40012400

08001088 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800109e:	f7ff fe63 	bl	8000d68 <HAL_GetTick>
 80010a2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	f043 0220 	orr.w	r2, r3, #32
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0d3      	b.n	8001272 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d131      	bne.n	800113c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d12a      	bne.n	800113c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010e6:	e021      	b.n	800112c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ee:	d01d      	beq.n	800112c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <HAL_ADC_PollForConversion+0x7e>
 80010f6:	f7ff fe37 	bl	8000d68 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d212      	bcs.n	800112c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f043 0204 	orr.w	r2, r3, #4
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e0a2      	b.n	8001272 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0d6      	beq.n	80010e8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800113a:	e070      	b.n	800121e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <HAL_ADC_PollForConversion+0x1f4>)
 800113e:	681c      	ldr	r4, [r3, #0]
 8001140:	2002      	movs	r0, #2
 8001142:	f001 fa09 	bl	8002558 <HAL_RCCEx_GetPeriphCLKFreq>
 8001146:	4603      	mov	r3, r0
 8001148:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <HAL_ADC_PollForConversion+0x1f8>)
 8001154:	400b      	ands	r3, r1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_ADC_PollForConversion+0x104>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68d9      	ldr	r1, [r3, #12]
 8001160:	4b48      	ldr	r3, [pc, #288]	; (8001284 <HAL_ADC_PollForConversion+0x1fc>)
 8001162:	400b      	ands	r3, r1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_ADC_PollForConversion+0x104>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6919      	ldr	r1, [r3, #16]
 800116e:	4b46      	ldr	r3, [pc, #280]	; (8001288 <HAL_ADC_PollForConversion+0x200>)
 8001170:	400b      	ands	r3, r1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <HAL_ADC_PollForConversion+0x100>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68d9      	ldr	r1, [r3, #12]
 800117c:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_ADC_PollForConversion+0x204>)
 800117e:	400b      	ands	r3, r1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_ADC_PollForConversion+0x100>
 8001184:	2314      	movs	r3, #20
 8001186:	e020      	b.n	80011ca <HAL_ADC_PollForConversion+0x142>
 8001188:	2329      	movs	r3, #41	; 0x29
 800118a:	e01e      	b.n	80011ca <HAL_ADC_PollForConversion+0x142>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_ADC_PollForConversion+0x200>)
 8001194:	400b      	ands	r3, r1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d106      	bne.n	80011a8 <HAL_ADC_PollForConversion+0x120>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68d9      	ldr	r1, [r3, #12]
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_ADC_PollForConversion+0x204>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00d      	beq.n	80011c4 <HAL_ADC_PollForConversion+0x13c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_ADC_PollForConversion+0x208>)
 80011b0:	400b      	ands	r3, r1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d108      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x140>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d9      	ldr	r1, [r3, #12]
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_ADC_PollForConversion+0x208>)
 80011be:	400b      	ands	r3, r1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x140>
 80011c4:	2354      	movs	r3, #84	; 0x54
 80011c6:	e000      	b.n	80011ca <HAL_ADC_PollForConversion+0x142>
 80011c8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011d0:	e021      	b.n	8001216 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d01a      	beq.n	8001210 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_PollForConversion+0x168>
 80011e0:	f7ff fdc2 	bl	8000d68 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d20f      	bcs.n	8001210 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d90b      	bls.n	8001210 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	f043 0204 	orr.w	r2, r3, #4
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e030      	b.n	8001272 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	429a      	cmp	r2, r3
 800121c:	d8d9      	bhi.n	80011d2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f06f 0212 	mvn.w	r2, #18
 8001226:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800123e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001242:	d115      	bne.n	8001270 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001248:	2b00      	cmp	r3, #0
 800124a:	d111      	bne.n	8001270 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	24924924 	.word	0x24924924
 8001284:	00924924 	.word	0x00924924
 8001288:	12492492 	.word	0x12492492
 800128c:	00492492 	.word	0x00492492
 8001290:	00249249 	.word	0x00249249

08001294 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x20>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e0dc      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1da>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d81c      	bhi.n	8001316 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b05      	subs	r3, #5
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4019      	ands	r1, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b05      	subs	r3, #5
 8001308:	fa00 f203 	lsl.w	r2, r0, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	; 0x34
 8001314:	e03c      	b.n	8001390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d81c      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b23      	subs	r3, #35	; 0x23
 8001330:	221f      	movs	r2, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	4019      	ands	r1, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b23      	subs	r3, #35	; 0x23
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
 8001356:	e01b      	b.n	8001390 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b41      	subs	r3, #65	; 0x41
 800136a:	221f      	movs	r2, #31
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	4019      	ands	r1, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b41      	subs	r3, #65	; 0x41
 8001384:	fa00 f203 	lsl.w	r2, r0, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b09      	cmp	r3, #9
 8001396:	d91c      	bls.n	80013d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	3b1e      	subs	r3, #30
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	3b1e      	subs	r3, #30
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	e019      	b.n	8001406 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6919      	ldr	r1, [r3, #16]
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4019      	ands	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d003      	beq.n	8001416 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001412:	2b11      	cmp	r3, #17
 8001414:	d132      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_ADC_ConfigChannel+0x1e4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d125      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d126      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800143c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d11a      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_ADC_ConfigChannel+0x1e8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <HAL_ADC_ConfigChannel+0x1ec>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9a      	lsrs	r2, r3, #18
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800145c:	e002      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3b01      	subs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f9      	bne.n	800145e <HAL_ADC_ConfigChannel+0x1b2>
 800146a:	e007      	b.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40012400 	.word	0x40012400
 8001494:	20000000 	.word	0x20000000
 8001498:	431bde83 	.word	0x431bde83

0800149c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d040      	beq.n	800153c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <ADC_Enable+0xac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <ADC_Enable+0xb0>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014d8:	e002      	b.n	80014e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3b01      	subs	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f9      	bne.n	80014da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014e6:	f7ff fc3f 	bl	8000d68 <HAL_GetTick>
 80014ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014ec:	e01f      	b.n	800152e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014ee:	f7ff fc3b 	bl	8000d68 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d918      	bls.n	800152e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d011      	beq.n	800152e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	f043 0210 	orr.w	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e007      	b.n	800153e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d1d8      	bne.n	80014ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000
 800154c:	431bde83 	.word	0x431bde83

08001550 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b01      	cmp	r3, #1
 8001568:	d12e      	bne.n	80015c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800157a:	f7ff fbf5 	bl	8000d68 <HAL_GetTick>
 800157e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001580:	e01b      	b.n	80015ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001582:	f7ff fbf1 	bl	8000d68 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d914      	bls.n	80015ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	f043 0210 	orr.w	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e007      	b.n	80015ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d0dc      	beq.n	8001582 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <__NVIC_EnableIRQ+0x34>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff2d 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff42 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff35 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e169      	b.n	8001ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8158 	bne.w	8001ad2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a9a      	ldr	r2, [pc, #616]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d05e      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800182c:	4a98      	ldr	r2, [pc, #608]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d875      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001832:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001838:	4a96      	ldr	r2, [pc, #600]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d86f      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800183e:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001844:	4a94      	ldr	r2, [pc, #592]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d869      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800184a:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04c      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001850:	4a92      	ldr	r2, [pc, #584]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d863      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001856:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d046      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800185c:	4a90      	ldr	r2, [pc, #576]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d85d      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001862:	2b12      	cmp	r3, #18
 8001864:	d82a      	bhi.n	80018bc <HAL_GPIO_Init+0xcc>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d859      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_GPIO_Init+0x80>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018d7 	.word	0x080018d7
 800187c:	08001919 	.word	0x08001919
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800191f 	.word	0x0800191f
 8001888:	0800191f 	.word	0x0800191f
 800188c:	0800191f 	.word	0x0800191f
 8001890:	0800191f 	.word	0x0800191f
 8001894:	0800191f 	.word	0x0800191f
 8001898:	0800191f 	.word	0x0800191f
 800189c:	0800191f 	.word	0x0800191f
 80018a0:	0800191f 	.word	0x0800191f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	0800191f 	.word	0x0800191f
 80018ac:	0800191f 	.word	0x0800191f
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c2:	e02c      	b.n	800191e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e029      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3304      	adds	r3, #4
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e024      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	3308      	adds	r3, #8
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e01f      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	330c      	adds	r3, #12
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e01a      	b.n	8001920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f2:	2304      	movs	r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e013      	b.n	8001920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	611a      	str	r2, [r3, #16]
          break;
 800190a:	e009      	b.n	8001920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	615a      	str	r2, [r3, #20]
          break;
 8001916:	e003      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x130>
          break;
 800191e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d801      	bhi.n	800192a <HAL_GPIO_Init+0x13a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	e001      	b.n	800192e <HAL_GPIO_Init+0x13e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d802      	bhi.n	800193c <HAL_GPIO_Init+0x14c>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x152>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	210f      	movs	r1, #15
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80b1 	beq.w	8001ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e004      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019dc:	2300      	movs	r3, #0
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ee:	492f      	ldr	r1, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	492c      	ldr	r1, [pc, #176]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4928      	ldr	r1, [pc, #160]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4918      	ldr	r1, [pc, #96]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4914      	ldr	r1, [pc, #80]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e021      	b.n	8001ad2 <HAL_GPIO_Init+0x2e2>
 8001a8e:	bf00      	nop
 8001a90:	10320000 	.word	0x10320000
 8001a94:	10310000 	.word	0x10310000
 8001a98:	10220000 	.word	0x10220000
 8001a9c:	10210000 	.word	0x10210000
 8001aa0:	10120000 	.word	0x10120000
 8001aa4:	10110000 	.word	0x10110000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40011400 	.word	0x40011400
 8001ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae8e 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e001      	b.n	8001b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	807b      	strh	r3, [r7, #2]
 8001b32:	4613      	mov	r3, r2
 8001b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b42:	e003      	b.n	8001b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	611a      	str	r2, [r3, #16]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	041a      	lsls	r2, r3, #16
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	400b      	ands	r3, r1
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f806 	bl	8001bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e272      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e24c      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f85e 	bl	8000d68 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f85a 	bl	8000d68 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e200      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f84a 	bl	8000d68 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f846 	bl	8000d68 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1ec      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c0      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe ffff 	bl	8000d68 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7fe fffb 	bl	8000d68 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe ffde 	bl	8000d68 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7fe ffda 	bl	8000d68 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e180      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe ffbe 	bl	8000d68 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7fe ffba 	bl	8000d68 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e160      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 face 	bl	80023b0 <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ffa4 	bl	8000d68 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7fe ffa0 	bl	8000d68 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e146      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b8b      	ldr	r3, [pc, #556]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b88      	ldr	r3, [pc, #544]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a87      	ldr	r2, [pc, #540]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7e      	ldr	r2, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe ff61 	bl	8000d68 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe ff5d 	bl	8000d68 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e103      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b75      	ldr	r3, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x4c8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a60      	ldr	r2, [pc, #384]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b58      	ldr	r3, [pc, #352]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a57      	ldr	r2, [pc, #348]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7fe ff11 	bl	8000d68 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe ff0d 	bl	8000d68 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0b1      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fefb 	bl	8000d68 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe fef7 	bl	8000d68 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e09b      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fecb 	bl	8000d68 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fec7 	bl	8000d68 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e06d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	491b      	ldr	r1, [pc, #108]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fe9b 	bl	8000d68 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fe97 	bl	8000d68 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e035      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fe84 	bl	8000d68 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fe80 	bl	8000d68 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e026      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e019      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x500>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d910      	bls.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0207 	bic.w	r2, r3, #7
 80020fa:	4965      	ldr	r1, [pc, #404]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b8      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d020      	beq.n	8002162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002144:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	494d      	ldr	r1, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d040      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e07f      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e073      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06b      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4936      	ldr	r1, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c0:	f7fe fdd2 	bl	8000d68 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe fdce 	bl	8000d68 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e053      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d210      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4922      	ldr	r1, [pc, #136]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e032      	b.n	8002286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4916      	ldr	r1, [pc, #88]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225e:	f000 f821 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1cc>)
 8002278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fd30 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08004c1c 	.word	0x08004c1c
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x36>
 80022d2:	e027      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	e027      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0c5b      	lsrs	r3, r3, #17
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	693b      	ldr	r3, [r7, #16]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	08004c34 	.word	0x08004c34
 8002344:	08004c44 	.word	0x08004c44
 8002348:	003d0900 	.word	0x003d0900

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <HAL_RCC_GetHCLKFreq+0x10>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff2 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08004c2c 	.word	0x08004c2c

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800238c:	f7ff ffde 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0adb      	lsrs	r3, r3, #11
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08004c2c 	.word	0x08004c2c

080023b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <RCC_Delay+0x34>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <RCC_Delay+0x38>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0a5b      	lsrs	r3, r3, #9
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023cc:	bf00      	nop
  }
  while (Delay --);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	60fa      	str	r2, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f9      	bne.n	80023cc <RCC_Delay+0x1c>
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000000 	.word	0x20000000
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d07d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a4b      	ldr	r2, [pc, #300]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002422:	61d3      	str	r3, [r2, #28]
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002430:	2301      	movs	r3, #1
 8002432:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d118      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002440:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244c:	f7fe fc8c 	bl	8000d68 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	e008      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002454:	f7fe fc88 	bl	8000d68 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e06d      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d02e      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d027      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002498:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b6:	f7fe fc57 	bl	8000d68 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe fc53 	bl	8000d68 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e036      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ee      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	490b      	ldr	r1, [pc, #44]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
 8002554:	42420440 	.word	0x42420440

08002558 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b10      	cmp	r3, #16
 800257e:	f200 808a 	bhi.w	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d045      	beq.n	8002614 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d075      	beq.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800258e:	e082      	b.n	8002696 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002590:	4b46      	ldr	r3, [pc, #280]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002596:	4b45      	ldr	r3, [pc, #276]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d07b      	beq.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	e004      	b.n	80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80025f0:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fc:	d102      	bne.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	61bb      	str	r3, [r7, #24]
      break;
 8002602:	e04a      	b.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
      break;
 8002612:	e042      	b.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d108      	bne.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e01f      	b.n	8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002642:	d109      	bne.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002650:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e00f      	b.n	8002678 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002662:	d11c      	bne.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d016      	beq.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002670:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002674:	61bb      	str	r3, [r7, #24]
      break;
 8002676:	e012      	b.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002678:	e011      	b.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800267a:	f7ff fe85 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0b9b      	lsrs	r3, r3, #14
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	61bb      	str	r3, [r7, #24]
      break;
 8002694:	e004      	b.n	80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002696:	bf00      	nop
 8002698:	e002      	b.n	80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800269e:	bf00      	nop
    }
  }
  return (frequency);
 80026a0:	69bb      	ldr	r3, [r7, #24]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08004c48 	.word	0x08004c48
 80026b4:	08004c58 	.word	0x08004c58
 80026b8:	007a1200 	.word	0x007a1200
 80026bc:	003d0900 	.word	0x003d0900
 80026c0:	aaaaaaab 	.word	0xaaaaaaab

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fa0a 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 fa90 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e03a      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_TIM_Base_Start_IT+0x98>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x58>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d009      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x58>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <HAL_TIM_Base_Start_IT+0x9c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x58>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_TIM_Base_Start_IT+0xa0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d010      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	e007      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800

08002808 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	f241 1311 	movw	r3, #4369	; 0x1111
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10f      	bne.n	8002850 <HAL_TIM_Base_Stop_IT+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a1a      	ldr	r2, [r3, #32]
 8002836:	f240 4344 	movw	r3, #1092	; 0x444
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_TIM_Base_Stop_IT+0x48>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e041      	b.n	80028fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f839 	bl	8002902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 f9c0 	bl	8002c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800292e:	2302      	movs	r3, #2
 8002930:	e0ae      	b.n	8002a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	f200 809f 	bhi.w	8002a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	0800297d 	.word	0x0800297d
 800294c:	08002a81 	.word	0x08002a81
 8002950:	08002a81 	.word	0x08002a81
 8002954:	08002a81 	.word	0x08002a81
 8002958:	080029bd 	.word	0x080029bd
 800295c:	08002a81 	.word	0x08002a81
 8002960:	08002a81 	.word	0x08002a81
 8002964:	08002a81 	.word	0x08002a81
 8002968:	080029ff 	.word	0x080029ff
 800296c:	08002a81 	.word	0x08002a81
 8002970:	08002a81 	.word	0x08002a81
 8002974:	08002a81 	.word	0x08002a81
 8002978:	08002a3f 	.word	0x08002a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f9b2 	bl	8002cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0208 	orr.w	r2, r2, #8
 8002996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6999      	ldr	r1, [r3, #24]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	619a      	str	r2, [r3, #24]
      break;
 80029ba:	e064      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f9f8 	bl	8002db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6999      	ldr	r1, [r3, #24]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	021a      	lsls	r2, r3, #8
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	619a      	str	r2, [r3, #24]
      break;
 80029fc:	e043      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fa41 	bl	8002e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0208 	orr.w	r2, r2, #8
 8002a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0204 	bic.w	r2, r2, #4
 8002a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	61da      	str	r2, [r3, #28]
      break;
 8002a3c:	e023      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fa8b 	bl	8002f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69d9      	ldr	r1, [r3, #28]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	61da      	str	r2, [r3, #28]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	75fb      	strb	r3, [r7, #23]
      break;
 8002a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0b4      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x186>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aec:	d03e      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0xd4>
 8002aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af2:	f200 8087 	bhi.w	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	f000 8086 	beq.w	8002c0a <HAL_TIM_ConfigClockSource+0x172>
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b02:	d87f      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d01a      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0xa6>
 8002b08:	2b70      	cmp	r3, #112	; 0x70
 8002b0a:	d87b      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d050      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b10:	2b60      	cmp	r3, #96	; 0x60
 8002b12:	d877      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d03c      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0xfa>
 8002b18:	2b50      	cmp	r3, #80	; 0x50
 8002b1a:	d873      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d058      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d86f      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d064      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b28:	2b30      	cmp	r3, #48	; 0x30
 8002b2a:	d86b      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d060      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d867      	bhi.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05c      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d05a      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	e062      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b4e:	f000 facc 	bl	80030ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	609a      	str	r2, [r3, #8]
      break;
 8002b6a:	e04f      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b7c:	f000 fab5 	bl	80030ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8e:	609a      	str	r2, [r3, #8]
      break;
 8002b90:	e03c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f000 fa2c 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2150      	movs	r1, #80	; 0x50
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fa83 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002bb0:	e02c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 fa4a 	bl	8003058 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2160      	movs	r1, #96	; 0x60
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fa73 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e01c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 fa0c 	bl	8002ffc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2140      	movs	r1, #64	; 0x40
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fa63 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e00c      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f000 fa5a 	bl	80030b6 <TIM_ITRx_SetConfig>
      break;
 8002c02:	e003      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e000      	b.n	8002c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d007      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <TIM_Base_SetConfig+0xbc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_Base_SetConfig+0x30>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <TIM_Base_SetConfig+0xc0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d108      	bne.n	8002c6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00b      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d007      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <TIM_Base_SetConfig+0xbc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d003      	beq.n	8002c8a <TIM_Base_SetConfig+0x62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <TIM_Base_SetConfig+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <TIM_Base_SetConfig+0xb8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d103      	bne.n	8002cd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800

08002cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 0201 	bic.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f023 0302 	bic.w	r3, r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <TIM_OC1_SetConfig+0xc8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0308 	bic.w	r3, r3, #8
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <TIM_OC1_SetConfig+0xc8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d111      	bne.n	8002d8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	621a      	str	r2, [r3, #32]
}
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40012c00 	.word	0x40012c00

08002db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f023 0210 	bic.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0320 	bic.w	r3, r3, #32
 8002e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_OC2_SetConfig+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10d      	bne.n	8002e34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <TIM_OC2_SetConfig+0xd0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d113      	bne.n	8002e64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00

08002e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <TIM_OC3_SetConfig+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10d      	bne.n	8002f06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <TIM_OC3_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	031b      	lsls	r3, r3, #12
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a0f      	ldr	r2, [pc, #60]	; (8002ff8 <TIM_OC4_SetConfig+0x98>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d109      	bne.n	8002fd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 030a 	bic.w	r3, r3, #10
 8003038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	031b      	lsls	r3, r3, #12
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003094:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f043 0307 	orr.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	609a      	str	r2, [r3, #8]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr

080030ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b087      	sub	sp, #28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003104:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	431a      	orrs	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4313      	orrs	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800313c:	2302      	movs	r3, #2
 800313e:	e046      	b.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d009      	beq.n	80031a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d10c      	bne.n	80031bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800

080031e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e042      	b.n	800327c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fcf0 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f97b 	bl	8003524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d16d      	bne.n	8003380 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Transmit+0x2c>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e066      	b.n	8003382 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c2:	f7fd fd51 	bl	8000d68 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	88fa      	ldrh	r2, [r7, #6]
 80032cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d108      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e003      	b.n	80032f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032f8:	e02a      	b.n	8003350 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f865 	bl	80033d4 <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e036      	b.n	8003382 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	3302      	adds	r3, #2
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e007      	b.n	8003342 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1cf      	bne.n	80032fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f835 	bl	80033d4 <UART_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d112      	bne.n	80033ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Receive_IT+0x26>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00b      	b.n	80033cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	461a      	mov	r2, r3
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f875 	bl	80034b0 <UART_Start_Receive_IT>
 80033c6:	4603      	mov	r3, r0
 80033c8:	e000      	b.n	80033cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
  }
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b090      	sub	sp, #64	; 0x40
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e4:	e050      	b.n	8003488 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d04c      	beq.n	8003488 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <UART_WaitOnFlagUntilTimeout+0x30>
 80033f4:	f7fd fcb8 	bl	8000d68 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003400:	429a      	cmp	r2, r3
 8003402:	d241      	bcs.n	8003488 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003424:	637a      	str	r2, [r7, #52]	; 0x34
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800342a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800342c:	e841 2300 	strex	r3, r2, [r1]
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e5      	bne.n	8003404 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	613b      	str	r3, [r7, #16]
   return(result);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003458:	623a      	str	r2, [r7, #32]
 800345a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	69f9      	ldr	r1, [r7, #28]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	61bb      	str	r3, [r7, #24]
   return(result);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e00f      	b.n	80034a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d09f      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3740      	adds	r7, #64	; 0x40
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2222      	movs	r2, #34	; 0x22
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800355e:	f023 030c 	bic.w	r3, r3, #12
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	430b      	orrs	r3, r1
 800356a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <UART_SetConfig+0x114>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7fe fefc 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	e002      	b.n	800359a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7fe fee4 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003598:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	009a      	lsls	r2, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <UART_SetConfig+0x118>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	0119      	lsls	r1, r3, #4
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009a      	lsls	r2, r3, #2
 80035c4:	441a      	add	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <UART_SetConfig+0x118>)
 80035d2:	fba3 0302 	umull	r0, r3, r3, r2
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2064      	movs	r0, #100	; 0x64
 80035da:	fb00 f303 	mul.w	r3, r0, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	3332      	adds	r3, #50	; 0x32
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <UART_SetConfig+0x118>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f0:	4419      	add	r1, r3
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fbb2 f2f3 	udiv	r2, r2, r3
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <UART_SetConfig+0x118>)
 800360a:	fba3 0302 	umull	r0, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2064      	movs	r0, #100	; 0x64
 8003612:	fb00 f303 	mul.w	r3, r0, r3
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	; 0x32
 800361c:	4a07      	ldr	r2, [pc, #28]	; (800363c <UART_SetConfig+0x118>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 020f 	and.w	r2, r3, #15
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	440a      	add	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40013800 	.word	0x40013800
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <siprintf>:
 8003640:	b40e      	push	{r1, r2, r3}
 8003642:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003646:	b500      	push	{lr}
 8003648:	b09c      	sub	sp, #112	; 0x70
 800364a:	ab1d      	add	r3, sp, #116	; 0x74
 800364c:	9002      	str	r0, [sp, #8]
 800364e:	9006      	str	r0, [sp, #24]
 8003650:	9107      	str	r1, [sp, #28]
 8003652:	9104      	str	r1, [sp, #16]
 8003654:	4808      	ldr	r0, [pc, #32]	; (8003678 <siprintf+0x38>)
 8003656:	4909      	ldr	r1, [pc, #36]	; (800367c <siprintf+0x3c>)
 8003658:	f853 2b04 	ldr.w	r2, [r3], #4
 800365c:	9105      	str	r1, [sp, #20]
 800365e:	6800      	ldr	r0, [r0, #0]
 8003660:	a902      	add	r1, sp, #8
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f000 f9cc 	bl	8003a00 <_svfiprintf_r>
 8003668:	2200      	movs	r2, #0
 800366a:	9b02      	ldr	r3, [sp, #8]
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	b01c      	add	sp, #112	; 0x70
 8003670:	f85d eb04 	ldr.w	lr, [sp], #4
 8003674:	b003      	add	sp, #12
 8003676:	4770      	bx	lr
 8003678:	20000058 	.word	0x20000058
 800367c:	ffff0208 	.word	0xffff0208

08003680 <siscanf>:
 8003680:	b40e      	push	{r1, r2, r3}
 8003682:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003686:	b530      	push	{r4, r5, lr}
 8003688:	b09c      	sub	sp, #112	; 0x70
 800368a:	ac1f      	add	r4, sp, #124	; 0x7c
 800368c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003690:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003694:	9002      	str	r0, [sp, #8]
 8003696:	9006      	str	r0, [sp, #24]
 8003698:	f7fc fd62 	bl	8000160 <strlen>
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <siscanf+0x4c>)
 800369e:	9003      	str	r0, [sp, #12]
 80036a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a2:	2300      	movs	r3, #0
 80036a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80036a6:	9314      	str	r3, [sp, #80]	; 0x50
 80036a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ac:	9007      	str	r0, [sp, #28]
 80036ae:	4808      	ldr	r0, [pc, #32]	; (80036d0 <siscanf+0x50>)
 80036b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80036b4:	462a      	mov	r2, r5
 80036b6:	4623      	mov	r3, r4
 80036b8:	a902      	add	r1, sp, #8
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	9401      	str	r4, [sp, #4]
 80036be:	f000 faf7 	bl	8003cb0 <__ssvfiscanf_r>
 80036c2:	b01c      	add	sp, #112	; 0x70
 80036c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036c8:	b003      	add	sp, #12
 80036ca:	4770      	bx	lr
 80036cc:	080036d5 	.word	0x080036d5
 80036d0:	20000058 	.word	0x20000058

080036d4 <__seofread>:
 80036d4:	2000      	movs	r0, #0
 80036d6:	4770      	bx	lr

080036d8 <memset>:
 80036d8:	4603      	mov	r3, r0
 80036da:	4402      	add	r2, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	f803 1b01 	strb.w	r1, [r3], #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <strncmp>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	b16a      	cbz	r2, 8003708 <strncmp+0x20>
 80036ec:	3901      	subs	r1, #1
 80036ee:	1884      	adds	r4, r0, r2
 80036f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d103      	bne.n	8003704 <strncmp+0x1c>
 80036fc:	42a0      	cmp	r0, r4
 80036fe:	d001      	beq.n	8003704 <strncmp+0x1c>
 8003700:	2a00      	cmp	r2, #0
 8003702:	d1f5      	bne.n	80036f0 <strncmp+0x8>
 8003704:	1ad0      	subs	r0, r2, r3
 8003706:	bd10      	pop	{r4, pc}
 8003708:	4610      	mov	r0, r2
 800370a:	e7fc      	b.n	8003706 <strncmp+0x1e>

0800370c <__errno>:
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <__errno+0x8>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000058 	.word	0x20000058

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	2600      	movs	r6, #0
 800371c:	4d0c      	ldr	r5, [pc, #48]	; (8003750 <__libc_init_array+0x38>)
 800371e:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	f001 f8fe 	bl	8004928 <_init>
 800372c:	2600      	movs	r6, #0
 800372e:	4d0a      	ldr	r5, [pc, #40]	; (8003758 <__libc_init_array+0x40>)
 8003730:	4c0a      	ldr	r4, [pc, #40]	; (800375c <__libc_init_array+0x44>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	08004dac 	.word	0x08004dac
 8003754:	08004dac 	.word	0x08004dac
 8003758:	08004dac 	.word	0x08004dac
 800375c:	08004db0 	.word	0x08004db0

08003760 <__retarget_lock_acquire_recursive>:
 8003760:	4770      	bx	lr

08003762 <__retarget_lock_release_recursive>:
 8003762:	4770      	bx	lr

08003764 <_free_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4605      	mov	r5, r0
 8003768:	2900      	cmp	r1, #0
 800376a:	d040      	beq.n	80037ee <_free_r+0x8a>
 800376c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003770:	1f0c      	subs	r4, r1, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	bfb8      	it	lt
 8003776:	18e4      	addlt	r4, r4, r3
 8003778:	f000 f8dc 	bl	8003934 <__malloc_lock>
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <_free_r+0x8c>)
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	b933      	cbnz	r3, 8003790 <_free_r+0x2c>
 8003782:	6063      	str	r3, [r4, #4]
 8003784:	6014      	str	r4, [r2, #0]
 8003786:	4628      	mov	r0, r5
 8003788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378c:	f000 b8d8 	b.w	8003940 <__malloc_unlock>
 8003790:	42a3      	cmp	r3, r4
 8003792:	d908      	bls.n	80037a6 <_free_r+0x42>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	1821      	adds	r1, r4, r0
 8003798:	428b      	cmp	r3, r1
 800379a:	bf01      	itttt	eq
 800379c:	6819      	ldreq	r1, [r3, #0]
 800379e:	685b      	ldreq	r3, [r3, #4]
 80037a0:	1809      	addeq	r1, r1, r0
 80037a2:	6021      	streq	r1, [r4, #0]
 80037a4:	e7ed      	b.n	8003782 <_free_r+0x1e>
 80037a6:	461a      	mov	r2, r3
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b10b      	cbz	r3, 80037b0 <_free_r+0x4c>
 80037ac:	42a3      	cmp	r3, r4
 80037ae:	d9fa      	bls.n	80037a6 <_free_r+0x42>
 80037b0:	6811      	ldr	r1, [r2, #0]
 80037b2:	1850      	adds	r0, r2, r1
 80037b4:	42a0      	cmp	r0, r4
 80037b6:	d10b      	bne.n	80037d0 <_free_r+0x6c>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	4401      	add	r1, r0
 80037bc:	1850      	adds	r0, r2, r1
 80037be:	4283      	cmp	r3, r0
 80037c0:	6011      	str	r1, [r2, #0]
 80037c2:	d1e0      	bne.n	8003786 <_free_r+0x22>
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4408      	add	r0, r1
 80037ca:	6010      	str	r0, [r2, #0]
 80037cc:	6053      	str	r3, [r2, #4]
 80037ce:	e7da      	b.n	8003786 <_free_r+0x22>
 80037d0:	d902      	bls.n	80037d8 <_free_r+0x74>
 80037d2:	230c      	movs	r3, #12
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	e7d6      	b.n	8003786 <_free_r+0x22>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	1821      	adds	r1, r4, r0
 80037dc:	428b      	cmp	r3, r1
 80037de:	bf01      	itttt	eq
 80037e0:	6819      	ldreq	r1, [r3, #0]
 80037e2:	685b      	ldreq	r3, [r3, #4]
 80037e4:	1809      	addeq	r1, r1, r0
 80037e6:	6021      	streq	r1, [r4, #0]
 80037e8:	6063      	str	r3, [r4, #4]
 80037ea:	6054      	str	r4, [r2, #4]
 80037ec:	e7cb      	b.n	8003786 <_free_r+0x22>
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	200002e8 	.word	0x200002e8

080037f4 <sbrk_aligned>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4e0e      	ldr	r6, [pc, #56]	; (8003830 <sbrk_aligned+0x3c>)
 80037f8:	460c      	mov	r4, r1
 80037fa:	6831      	ldr	r1, [r6, #0]
 80037fc:	4605      	mov	r5, r0
 80037fe:	b911      	cbnz	r1, 8003806 <sbrk_aligned+0x12>
 8003800:	f000 ff3a 	bl	8004678 <_sbrk_r>
 8003804:	6030      	str	r0, [r6, #0]
 8003806:	4621      	mov	r1, r4
 8003808:	4628      	mov	r0, r5
 800380a:	f000 ff35 	bl	8004678 <_sbrk_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d00a      	beq.n	8003828 <sbrk_aligned+0x34>
 8003812:	1cc4      	adds	r4, r0, #3
 8003814:	f024 0403 	bic.w	r4, r4, #3
 8003818:	42a0      	cmp	r0, r4
 800381a:	d007      	beq.n	800382c <sbrk_aligned+0x38>
 800381c:	1a21      	subs	r1, r4, r0
 800381e:	4628      	mov	r0, r5
 8003820:	f000 ff2a 	bl	8004678 <_sbrk_r>
 8003824:	3001      	adds	r0, #1
 8003826:	d101      	bne.n	800382c <sbrk_aligned+0x38>
 8003828:	f04f 34ff 	mov.w	r4, #4294967295
 800382c:	4620      	mov	r0, r4
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	200002ec 	.word	0x200002ec

08003834 <_malloc_r>:
 8003834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003838:	1ccd      	adds	r5, r1, #3
 800383a:	f025 0503 	bic.w	r5, r5, #3
 800383e:	3508      	adds	r5, #8
 8003840:	2d0c      	cmp	r5, #12
 8003842:	bf38      	it	cc
 8003844:	250c      	movcc	r5, #12
 8003846:	2d00      	cmp	r5, #0
 8003848:	4607      	mov	r7, r0
 800384a:	db01      	blt.n	8003850 <_malloc_r+0x1c>
 800384c:	42a9      	cmp	r1, r5
 800384e:	d905      	bls.n	800385c <_malloc_r+0x28>
 8003850:	230c      	movs	r3, #12
 8003852:	2600      	movs	r6, #0
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4630      	mov	r0, r6
 8003858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800385c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003930 <_malloc_r+0xfc>
 8003860:	f000 f868 	bl	8003934 <__malloc_lock>
 8003864:	f8d8 3000 	ldr.w	r3, [r8]
 8003868:	461c      	mov	r4, r3
 800386a:	bb5c      	cbnz	r4, 80038c4 <_malloc_r+0x90>
 800386c:	4629      	mov	r1, r5
 800386e:	4638      	mov	r0, r7
 8003870:	f7ff ffc0 	bl	80037f4 <sbrk_aligned>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	4604      	mov	r4, r0
 8003878:	d155      	bne.n	8003926 <_malloc_r+0xf2>
 800387a:	f8d8 4000 	ldr.w	r4, [r8]
 800387e:	4626      	mov	r6, r4
 8003880:	2e00      	cmp	r6, #0
 8003882:	d145      	bne.n	8003910 <_malloc_r+0xdc>
 8003884:	2c00      	cmp	r4, #0
 8003886:	d048      	beq.n	800391a <_malloc_r+0xe6>
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	4631      	mov	r1, r6
 800388c:	4638      	mov	r0, r7
 800388e:	eb04 0903 	add.w	r9, r4, r3
 8003892:	f000 fef1 	bl	8004678 <_sbrk_r>
 8003896:	4581      	cmp	r9, r0
 8003898:	d13f      	bne.n	800391a <_malloc_r+0xe6>
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	4638      	mov	r0, r7
 800389e:	1a6d      	subs	r5, r5, r1
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7ff ffa7 	bl	80037f4 <sbrk_aligned>
 80038a6:	3001      	adds	r0, #1
 80038a8:	d037      	beq.n	800391a <_malloc_r+0xe6>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	442b      	add	r3, r5
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	f8d8 3000 	ldr.w	r3, [r8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d038      	beq.n	800392a <_malloc_r+0xf6>
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	42a2      	cmp	r2, r4
 80038bc:	d12b      	bne.n	8003916 <_malloc_r+0xe2>
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e00f      	b.n	80038e4 <_malloc_r+0xb0>
 80038c4:	6822      	ldr	r2, [r4, #0]
 80038c6:	1b52      	subs	r2, r2, r5
 80038c8:	d41f      	bmi.n	800390a <_malloc_r+0xd6>
 80038ca:	2a0b      	cmp	r2, #11
 80038cc:	d917      	bls.n	80038fe <_malloc_r+0xca>
 80038ce:	1961      	adds	r1, r4, r5
 80038d0:	42a3      	cmp	r3, r4
 80038d2:	6025      	str	r5, [r4, #0]
 80038d4:	bf18      	it	ne
 80038d6:	6059      	strne	r1, [r3, #4]
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	bf08      	it	eq
 80038dc:	f8c8 1000 	streq.w	r1, [r8]
 80038e0:	5162      	str	r2, [r4, r5]
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	4638      	mov	r0, r7
 80038e6:	f104 060b 	add.w	r6, r4, #11
 80038ea:	f000 f829 	bl	8003940 <__malloc_unlock>
 80038ee:	f026 0607 	bic.w	r6, r6, #7
 80038f2:	1d23      	adds	r3, r4, #4
 80038f4:	1af2      	subs	r2, r6, r3
 80038f6:	d0ae      	beq.n	8003856 <_malloc_r+0x22>
 80038f8:	1b9b      	subs	r3, r3, r6
 80038fa:	50a3      	str	r3, [r4, r2]
 80038fc:	e7ab      	b.n	8003856 <_malloc_r+0x22>
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6862      	ldr	r2, [r4, #4]
 8003902:	d1dd      	bne.n	80038c0 <_malloc_r+0x8c>
 8003904:	f8c8 2000 	str.w	r2, [r8]
 8003908:	e7ec      	b.n	80038e4 <_malloc_r+0xb0>
 800390a:	4623      	mov	r3, r4
 800390c:	6864      	ldr	r4, [r4, #4]
 800390e:	e7ac      	b.n	800386a <_malloc_r+0x36>
 8003910:	4634      	mov	r4, r6
 8003912:	6876      	ldr	r6, [r6, #4]
 8003914:	e7b4      	b.n	8003880 <_malloc_r+0x4c>
 8003916:	4613      	mov	r3, r2
 8003918:	e7cc      	b.n	80038b4 <_malloc_r+0x80>
 800391a:	230c      	movs	r3, #12
 800391c:	4638      	mov	r0, r7
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	f000 f80e 	bl	8003940 <__malloc_unlock>
 8003924:	e797      	b.n	8003856 <_malloc_r+0x22>
 8003926:	6025      	str	r5, [r4, #0]
 8003928:	e7dc      	b.n	80038e4 <_malloc_r+0xb0>
 800392a:	605b      	str	r3, [r3, #4]
 800392c:	deff      	udf	#255	; 0xff
 800392e:	bf00      	nop
 8003930:	200002e8 	.word	0x200002e8

08003934 <__malloc_lock>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__malloc_lock+0x8>)
 8003936:	f7ff bf13 	b.w	8003760 <__retarget_lock_acquire_recursive>
 800393a:	bf00      	nop
 800393c:	200002e4 	.word	0x200002e4

08003940 <__malloc_unlock>:
 8003940:	4801      	ldr	r0, [pc, #4]	; (8003948 <__malloc_unlock+0x8>)
 8003942:	f7ff bf0e 	b.w	8003762 <__retarget_lock_release_recursive>
 8003946:	bf00      	nop
 8003948:	200002e4 	.word	0x200002e4

0800394c <__ssputs_r>:
 800394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	461f      	mov	r7, r3
 8003952:	688e      	ldr	r6, [r1, #8]
 8003954:	4682      	mov	sl, r0
 8003956:	42be      	cmp	r6, r7
 8003958:	460c      	mov	r4, r1
 800395a:	4690      	mov	r8, r2
 800395c:	680b      	ldr	r3, [r1, #0]
 800395e:	d82c      	bhi.n	80039ba <__ssputs_r+0x6e>
 8003960:	898a      	ldrh	r2, [r1, #12]
 8003962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003966:	d026      	beq.n	80039b6 <__ssputs_r+0x6a>
 8003968:	6965      	ldr	r5, [r4, #20]
 800396a:	6909      	ldr	r1, [r1, #16]
 800396c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003970:	eba3 0901 	sub.w	r9, r3, r1
 8003974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003978:	1c7b      	adds	r3, r7, #1
 800397a:	444b      	add	r3, r9
 800397c:	106d      	asrs	r5, r5, #1
 800397e:	429d      	cmp	r5, r3
 8003980:	bf38      	it	cc
 8003982:	461d      	movcc	r5, r3
 8003984:	0553      	lsls	r3, r2, #21
 8003986:	d527      	bpl.n	80039d8 <__ssputs_r+0x8c>
 8003988:	4629      	mov	r1, r5
 800398a:	f7ff ff53 	bl	8003834 <_malloc_r>
 800398e:	4606      	mov	r6, r0
 8003990:	b360      	cbz	r0, 80039ec <__ssputs_r+0xa0>
 8003992:	464a      	mov	r2, r9
 8003994:	6921      	ldr	r1, [r4, #16]
 8003996:	f000 fe8d 	bl	80046b4 <memcpy>
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	6126      	str	r6, [r4, #16]
 80039a8:	444e      	add	r6, r9
 80039aa:	6026      	str	r6, [r4, #0]
 80039ac:	463e      	mov	r6, r7
 80039ae:	6165      	str	r5, [r4, #20]
 80039b0:	eba5 0509 	sub.w	r5, r5, r9
 80039b4:	60a5      	str	r5, [r4, #8]
 80039b6:	42be      	cmp	r6, r7
 80039b8:	d900      	bls.n	80039bc <__ssputs_r+0x70>
 80039ba:	463e      	mov	r6, r7
 80039bc:	4632      	mov	r2, r6
 80039be:	4641      	mov	r1, r8
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	f000 fe3e 	bl	8004642 <memmove>
 80039c6:	2000      	movs	r0, #0
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	1b9b      	subs	r3, r3, r6
 80039cc:	60a3      	str	r3, [r4, #8]
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	4433      	add	r3, r6
 80039d2:	6023      	str	r3, [r4, #0]
 80039d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d8:	462a      	mov	r2, r5
 80039da:	f000 fe79 	bl	80046d0 <_realloc_r>
 80039de:	4606      	mov	r6, r0
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1e0      	bne.n	80039a6 <__ssputs_r+0x5a>
 80039e4:	4650      	mov	r0, sl
 80039e6:	6921      	ldr	r1, [r4, #16]
 80039e8:	f7ff febc 	bl	8003764 <_free_r>
 80039ec:	230c      	movs	r3, #12
 80039ee:	f8ca 3000 	str.w	r3, [sl]
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	e7e9      	b.n	80039d4 <__ssputs_r+0x88>

08003a00 <_svfiprintf_r>:
 8003a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a04:	4698      	mov	r8, r3
 8003a06:	898b      	ldrh	r3, [r1, #12]
 8003a08:	4607      	mov	r7, r0
 8003a0a:	061b      	lsls	r3, r3, #24
 8003a0c:	460d      	mov	r5, r1
 8003a0e:	4614      	mov	r4, r2
 8003a10:	b09d      	sub	sp, #116	; 0x74
 8003a12:	d50e      	bpl.n	8003a32 <_svfiprintf_r+0x32>
 8003a14:	690b      	ldr	r3, [r1, #16]
 8003a16:	b963      	cbnz	r3, 8003a32 <_svfiprintf_r+0x32>
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	f7ff ff0b 	bl	8003834 <_malloc_r>
 8003a1e:	6028      	str	r0, [r5, #0]
 8003a20:	6128      	str	r0, [r5, #16]
 8003a22:	b920      	cbnz	r0, 8003a2e <_svfiprintf_r+0x2e>
 8003a24:	230c      	movs	r3, #12
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	e0d0      	b.n	8003bd0 <_svfiprintf_r+0x1d0>
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	616b      	str	r3, [r5, #20]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9309      	str	r3, [sp, #36]	; 0x24
 8003a36:	2320      	movs	r3, #32
 8003a38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a3c:	2330      	movs	r3, #48	; 0x30
 8003a3e:	f04f 0901 	mov.w	r9, #1
 8003a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a46:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003be8 <_svfiprintf_r+0x1e8>
 8003a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4e:	4623      	mov	r3, r4
 8003a50:	469a      	mov	sl, r3
 8003a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a56:	b10a      	cbz	r2, 8003a5c <_svfiprintf_r+0x5c>
 8003a58:	2a25      	cmp	r2, #37	; 0x25
 8003a5a:	d1f9      	bne.n	8003a50 <_svfiprintf_r+0x50>
 8003a5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a60:	d00b      	beq.n	8003a7a <_svfiprintf_r+0x7a>
 8003a62:	465b      	mov	r3, fp
 8003a64:	4622      	mov	r2, r4
 8003a66:	4629      	mov	r1, r5
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7ff ff6f 	bl	800394c <__ssputs_r>
 8003a6e:	3001      	adds	r0, #1
 8003a70:	f000 80a9 	beq.w	8003bc6 <_svfiprintf_r+0x1c6>
 8003a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a76:	445a      	add	r2, fp
 8003a78:	9209      	str	r2, [sp, #36]	; 0x24
 8003a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a1 	beq.w	8003bc6 <_svfiprintf_r+0x1c6>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a8e:	f10a 0a01 	add.w	sl, sl, #1
 8003a92:	9304      	str	r3, [sp, #16]
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a9a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9c:	4654      	mov	r4, sl
 8003a9e:	2205      	movs	r2, #5
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	4850      	ldr	r0, [pc, #320]	; (8003be8 <_svfiprintf_r+0x1e8>)
 8003aa6:	f000 fdf7 	bl	8004698 <memchr>
 8003aaa:	9a04      	ldr	r2, [sp, #16]
 8003aac:	b9d8      	cbnz	r0, 8003ae6 <_svfiprintf_r+0xe6>
 8003aae:	06d0      	lsls	r0, r2, #27
 8003ab0:	bf44      	itt	mi
 8003ab2:	2320      	movmi	r3, #32
 8003ab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab8:	0711      	lsls	r1, r2, #28
 8003aba:	bf44      	itt	mi
 8003abc:	232b      	movmi	r3, #43	; 0x2b
 8003abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac8:	d015      	beq.n	8003af6 <_svfiprintf_r+0xf6>
 8003aca:	4654      	mov	r4, sl
 8003acc:	2000      	movs	r0, #0
 8003ace:	f04f 0c0a 	mov.w	ip, #10
 8003ad2:	9a07      	ldr	r2, [sp, #28]
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ada:	3b30      	subs	r3, #48	; 0x30
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d94d      	bls.n	8003b7c <_svfiprintf_r+0x17c>
 8003ae0:	b1b0      	cbz	r0, 8003b10 <_svfiprintf_r+0x110>
 8003ae2:	9207      	str	r2, [sp, #28]
 8003ae4:	e014      	b.n	8003b10 <_svfiprintf_r+0x110>
 8003ae6:	eba0 0308 	sub.w	r3, r0, r8
 8003aea:	fa09 f303 	lsl.w	r3, r9, r3
 8003aee:	4313      	orrs	r3, r2
 8003af0:	46a2      	mov	sl, r4
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	e7d2      	b.n	8003a9c <_svfiprintf_r+0x9c>
 8003af6:	9b03      	ldr	r3, [sp, #12]
 8003af8:	1d19      	adds	r1, r3, #4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	9103      	str	r1, [sp, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfbb      	ittet	lt
 8003b02:	425b      	neglt	r3, r3
 8003b04:	f042 0202 	orrlt.w	r2, r2, #2
 8003b08:	9307      	strge	r3, [sp, #28]
 8003b0a:	9307      	strlt	r3, [sp, #28]
 8003b0c:	bfb8      	it	lt
 8003b0e:	9204      	strlt	r2, [sp, #16]
 8003b10:	7823      	ldrb	r3, [r4, #0]
 8003b12:	2b2e      	cmp	r3, #46	; 0x2e
 8003b14:	d10c      	bne.n	8003b30 <_svfiprintf_r+0x130>
 8003b16:	7863      	ldrb	r3, [r4, #1]
 8003b18:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1a:	d134      	bne.n	8003b86 <_svfiprintf_r+0x186>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	3402      	adds	r4, #2
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	9203      	str	r2, [sp, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfb8      	it	lt
 8003b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b2e:	9305      	str	r3, [sp, #20]
 8003b30:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003bec <_svfiprintf_r+0x1ec>
 8003b34:	2203      	movs	r2, #3
 8003b36:	4650      	mov	r0, sl
 8003b38:	7821      	ldrb	r1, [r4, #0]
 8003b3a:	f000 fdad 	bl	8004698 <memchr>
 8003b3e:	b138      	cbz	r0, 8003b50 <_svfiprintf_r+0x150>
 8003b40:	2240      	movs	r2, #64	; 0x40
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	eba0 000a 	sub.w	r0, r0, sl
 8003b48:	4082      	lsls	r2, r0
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	3401      	adds	r4, #1
 8003b4e:	9304      	str	r3, [sp, #16]
 8003b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b54:	2206      	movs	r2, #6
 8003b56:	4826      	ldr	r0, [pc, #152]	; (8003bf0 <_svfiprintf_r+0x1f0>)
 8003b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b5c:	f000 fd9c 	bl	8004698 <memchr>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d038      	beq.n	8003bd6 <_svfiprintf_r+0x1d6>
 8003b64:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <_svfiprintf_r+0x1f4>)
 8003b66:	bb1b      	cbnz	r3, 8003bb0 <_svfiprintf_r+0x1b0>
 8003b68:	9b03      	ldr	r3, [sp, #12]
 8003b6a:	3307      	adds	r3, #7
 8003b6c:	f023 0307 	bic.w	r3, r3, #7
 8003b70:	3308      	adds	r3, #8
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b76:	4433      	add	r3, r6
 8003b78:	9309      	str	r3, [sp, #36]	; 0x24
 8003b7a:	e768      	b.n	8003a4e <_svfiprintf_r+0x4e>
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b84:	e7a6      	b.n	8003ad4 <_svfiprintf_r+0xd4>
 8003b86:	2300      	movs	r3, #0
 8003b88:	f04f 0c0a 	mov.w	ip, #10
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	3401      	adds	r4, #1
 8003b90:	9305      	str	r3, [sp, #20]
 8003b92:	4620      	mov	r0, r4
 8003b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b98:	3a30      	subs	r2, #48	; 0x30
 8003b9a:	2a09      	cmp	r2, #9
 8003b9c:	d903      	bls.n	8003ba6 <_svfiprintf_r+0x1a6>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0c6      	beq.n	8003b30 <_svfiprintf_r+0x130>
 8003ba2:	9105      	str	r1, [sp, #20]
 8003ba4:	e7c4      	b.n	8003b30 <_svfiprintf_r+0x130>
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	2301      	movs	r3, #1
 8003baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bae:	e7f0      	b.n	8003b92 <_svfiprintf_r+0x192>
 8003bb0:	ab03      	add	r3, sp, #12
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	462a      	mov	r2, r5
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <_svfiprintf_r+0x1f8>)
 8003bba:	a904      	add	r1, sp, #16
 8003bbc:	f3af 8000 	nop.w
 8003bc0:	1c42      	adds	r2, r0, #1
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	d1d6      	bne.n	8003b74 <_svfiprintf_r+0x174>
 8003bc6:	89ab      	ldrh	r3, [r5, #12]
 8003bc8:	065b      	lsls	r3, r3, #25
 8003bca:	f53f af2d 	bmi.w	8003a28 <_svfiprintf_r+0x28>
 8003bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bd0:	b01d      	add	sp, #116	; 0x74
 8003bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd6:	ab03      	add	r3, sp, #12
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4638      	mov	r0, r7
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <_svfiprintf_r+0x1f8>)
 8003be0:	a904      	add	r1, sp, #16
 8003be2:	f000 fa4f 	bl	8004084 <_printf_i>
 8003be6:	e7eb      	b.n	8003bc0 <_svfiprintf_r+0x1c0>
 8003be8:	08004c5a 	.word	0x08004c5a
 8003bec:	08004c60 	.word	0x08004c60
 8003bf0:	08004c64 	.word	0x08004c64
 8003bf4:	00000000 	.word	0x00000000
 8003bf8:	0800394d 	.word	0x0800394d

08003bfc <_sungetc_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	1c4b      	adds	r3, r1, #1
 8003c00:	4614      	mov	r4, r2
 8003c02:	d103      	bne.n	8003c0c <_sungetc_r+0x10>
 8003c04:	f04f 35ff 	mov.w	r5, #4294967295
 8003c08:	4628      	mov	r0, r5
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	8993      	ldrh	r3, [r2, #12]
 8003c0e:	b2cd      	uxtb	r5, r1
 8003c10:	f023 0320 	bic.w	r3, r3, #32
 8003c14:	8193      	strh	r3, [r2, #12]
 8003c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c18:	6852      	ldr	r2, [r2, #4]
 8003c1a:	b18b      	cbz	r3, 8003c40 <_sungetc_r+0x44>
 8003c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	dd08      	ble.n	8003c34 <_sungetc_r+0x38>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003c2c:	6863      	ldr	r3, [r4, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6063      	str	r3, [r4, #4]
 8003c32:	e7e9      	b.n	8003c08 <_sungetc_r+0xc>
 8003c34:	4621      	mov	r1, r4
 8003c36:	f000 fccc 	bl	80045d2 <__submore>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d0f1      	beq.n	8003c22 <_sungetc_r+0x26>
 8003c3e:	e7e1      	b.n	8003c04 <_sungetc_r+0x8>
 8003c40:	6921      	ldr	r1, [r4, #16]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	b151      	cbz	r1, 8003c5c <_sungetc_r+0x60>
 8003c46:	4299      	cmp	r1, r3
 8003c48:	d208      	bcs.n	8003c5c <_sungetc_r+0x60>
 8003c4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003c4e:	42a9      	cmp	r1, r5
 8003c50:	d104      	bne.n	8003c5c <_sungetc_r+0x60>
 8003c52:	3b01      	subs	r3, #1
 8003c54:	3201      	adds	r2, #1
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	6062      	str	r2, [r4, #4]
 8003c5a:	e7d5      	b.n	8003c08 <_sungetc_r+0xc>
 8003c5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c64:	6363      	str	r3, [r4, #52]	; 0x34
 8003c66:	2303      	movs	r3, #3
 8003c68:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	2301      	movs	r3, #1
 8003c74:	e7dc      	b.n	8003c30 <_sungetc_r+0x34>

08003c76 <__ssrefill_r>:
 8003c76:	b510      	push	{r4, lr}
 8003c78:	460c      	mov	r4, r1
 8003c7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003c7c:	b169      	cbz	r1, 8003c9a <__ssrefill_r+0x24>
 8003c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c82:	4299      	cmp	r1, r3
 8003c84:	d001      	beq.n	8003c8a <__ssrefill_r+0x14>
 8003c86:	f7ff fd6d 	bl	8003764 <_free_r>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	b113      	cbz	r3, 8003c9a <__ssrefill_r+0x24>
 8003c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	6923      	ldr	r3, [r4, #16]
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	e7f3      	b.n	8003c98 <__ssrefill_r+0x22>

08003cb0 <__ssvfiscanf_r>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4606      	mov	r6, r0
 8003cba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cbe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003cc2:	49a6      	ldr	r1, [pc, #664]	; (8003f5c <__ssvfiscanf_r+0x2ac>)
 8003cc4:	f10d 0804 	add.w	r8, sp, #4
 8003cc8:	91a0      	str	r1, [sp, #640]	; 0x280
 8003cca:	49a5      	ldr	r1, [pc, #660]	; (8003f60 <__ssvfiscanf_r+0x2b0>)
 8003ccc:	4fa5      	ldr	r7, [pc, #660]	; (8003f64 <__ssvfiscanf_r+0x2b4>)
 8003cce:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003f68 <__ssvfiscanf_r+0x2b8>
 8003cd2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003cd6:	91a1      	str	r1, [sp, #644]	; 0x284
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	7813      	ldrb	r3, [r2, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 815a 	beq.w	8003f96 <__ssvfiscanf_r+0x2e6>
 8003ce2:	5cf9      	ldrb	r1, [r7, r3]
 8003ce4:	1c55      	adds	r5, r2, #1
 8003ce6:	f011 0108 	ands.w	r1, r1, #8
 8003cea:	d019      	beq.n	8003d20 <__ssvfiscanf_r+0x70>
 8003cec:	6863      	ldr	r3, [r4, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	dd0f      	ble.n	8003d12 <__ssvfiscanf_r+0x62>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	5cba      	ldrb	r2, [r7, r2]
 8003cf8:	0712      	lsls	r2, r2, #28
 8003cfa:	d401      	bmi.n	8003d00 <__ssvfiscanf_r+0x50>
 8003cfc:	462a      	mov	r2, r5
 8003cfe:	e7ec      	b.n	8003cda <__ssvfiscanf_r+0x2a>
 8003d00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d02:	3301      	adds	r3, #1
 8003d04:	3201      	adds	r2, #1
 8003d06:	9245      	str	r2, [sp, #276]	; 0x114
 8003d08:	6862      	ldr	r2, [r4, #4]
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	3a01      	subs	r2, #1
 8003d0e:	6062      	str	r2, [r4, #4]
 8003d10:	e7ec      	b.n	8003cec <__ssvfiscanf_r+0x3c>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4630      	mov	r0, r6
 8003d16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d18:	4798      	blx	r3
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0e9      	beq.n	8003cf2 <__ssvfiscanf_r+0x42>
 8003d1e:	e7ed      	b.n	8003cfc <__ssvfiscanf_r+0x4c>
 8003d20:	2b25      	cmp	r3, #37	; 0x25
 8003d22:	d012      	beq.n	8003d4a <__ssvfiscanf_r+0x9a>
 8003d24:	469a      	mov	sl, r3
 8003d26:	6863      	ldr	r3, [r4, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f340 8092 	ble.w	8003e52 <__ssvfiscanf_r+0x1a2>
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	7813      	ldrb	r3, [r2, #0]
 8003d32:	4553      	cmp	r3, sl
 8003d34:	f040 812f 	bne.w	8003f96 <__ssvfiscanf_r+0x2e6>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	3201      	adds	r2, #1
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d42:	6022      	str	r2, [r4, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	9345      	str	r3, [sp, #276]	; 0x114
 8003d48:	e7d8      	b.n	8003cfc <__ssvfiscanf_r+0x4c>
 8003d4a:	9141      	str	r1, [sp, #260]	; 0x104
 8003d4c:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d4e:	7853      	ldrb	r3, [r2, #1]
 8003d50:	2b2a      	cmp	r3, #42	; 0x2a
 8003d52:	bf04      	itt	eq
 8003d54:	2310      	moveq	r3, #16
 8003d56:	1c95      	addeq	r5, r2, #2
 8003d58:	f04f 020a 	mov.w	r2, #10
 8003d5c:	bf08      	it	eq
 8003d5e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003d60:	46aa      	mov	sl, r5
 8003d62:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d66:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	d91c      	bls.n	8003da8 <__ssvfiscanf_r+0xf8>
 8003d6e:	2203      	movs	r2, #3
 8003d70:	487d      	ldr	r0, [pc, #500]	; (8003f68 <__ssvfiscanf_r+0x2b8>)
 8003d72:	f000 fc91 	bl	8004698 <memchr>
 8003d76:	b138      	cbz	r0, 8003d88 <__ssvfiscanf_r+0xd8>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4655      	mov	r5, sl
 8003d7c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d7e:	eba0 0009 	sub.w	r0, r0, r9
 8003d82:	4083      	lsls	r3, r0
 8003d84:	4313      	orrs	r3, r2
 8003d86:	9341      	str	r3, [sp, #260]	; 0x104
 8003d88:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d8c:	2b78      	cmp	r3, #120	; 0x78
 8003d8e:	d806      	bhi.n	8003d9e <__ssvfiscanf_r+0xee>
 8003d90:	2b57      	cmp	r3, #87	; 0x57
 8003d92:	d810      	bhi.n	8003db6 <__ssvfiscanf_r+0x106>
 8003d94:	2b25      	cmp	r3, #37	; 0x25
 8003d96:	d0c5      	beq.n	8003d24 <__ssvfiscanf_r+0x74>
 8003d98:	d856      	bhi.n	8003e48 <__ssvfiscanf_r+0x198>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d064      	beq.n	8003e68 <__ssvfiscanf_r+0x1b8>
 8003d9e:	2303      	movs	r3, #3
 8003da0:	9347      	str	r3, [sp, #284]	; 0x11c
 8003da2:	230a      	movs	r3, #10
 8003da4:	9342      	str	r3, [sp, #264]	; 0x108
 8003da6:	e075      	b.n	8003e94 <__ssvfiscanf_r+0x1e4>
 8003da8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003daa:	4655      	mov	r5, sl
 8003dac:	fb02 1103 	mla	r1, r2, r3, r1
 8003db0:	3930      	subs	r1, #48	; 0x30
 8003db2:	9143      	str	r1, [sp, #268]	; 0x10c
 8003db4:	e7d4      	b.n	8003d60 <__ssvfiscanf_r+0xb0>
 8003db6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003dba:	2a20      	cmp	r2, #32
 8003dbc:	d8ef      	bhi.n	8003d9e <__ssvfiscanf_r+0xee>
 8003dbe:	a101      	add	r1, pc, #4	; (adr r1, 8003dc4 <__ssvfiscanf_r+0x114>)
 8003dc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003dc4:	08003e77 	.word	0x08003e77
 8003dc8:	08003d9f 	.word	0x08003d9f
 8003dcc:	08003d9f 	.word	0x08003d9f
 8003dd0:	08003ed5 	.word	0x08003ed5
 8003dd4:	08003d9f 	.word	0x08003d9f
 8003dd8:	08003d9f 	.word	0x08003d9f
 8003ddc:	08003d9f 	.word	0x08003d9f
 8003de0:	08003d9f 	.word	0x08003d9f
 8003de4:	08003d9f 	.word	0x08003d9f
 8003de8:	08003d9f 	.word	0x08003d9f
 8003dec:	08003d9f 	.word	0x08003d9f
 8003df0:	08003eeb 	.word	0x08003eeb
 8003df4:	08003ed1 	.word	0x08003ed1
 8003df8:	08003e4f 	.word	0x08003e4f
 8003dfc:	08003e4f 	.word	0x08003e4f
 8003e00:	08003e4f 	.word	0x08003e4f
 8003e04:	08003d9f 	.word	0x08003d9f
 8003e08:	08003e8d 	.word	0x08003e8d
 8003e0c:	08003d9f 	.word	0x08003d9f
 8003e10:	08003d9f 	.word	0x08003d9f
 8003e14:	08003d9f 	.word	0x08003d9f
 8003e18:	08003d9f 	.word	0x08003d9f
 8003e1c:	08003efb 	.word	0x08003efb
 8003e20:	08003ec9 	.word	0x08003ec9
 8003e24:	08003e6f 	.word	0x08003e6f
 8003e28:	08003d9f 	.word	0x08003d9f
 8003e2c:	08003d9f 	.word	0x08003d9f
 8003e30:	08003ef7 	.word	0x08003ef7
 8003e34:	08003d9f 	.word	0x08003d9f
 8003e38:	08003ed1 	.word	0x08003ed1
 8003e3c:	08003d9f 	.word	0x08003d9f
 8003e40:	08003d9f 	.word	0x08003d9f
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	3b45      	subs	r3, #69	; 0x45
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d8a7      	bhi.n	8003d9e <__ssvfiscanf_r+0xee>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e01f      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003e52:	4621      	mov	r1, r4
 8003e54:	4630      	mov	r0, r6
 8003e56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e58:	4798      	blx	r3
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f43f af67 	beq.w	8003d2e <__ssvfiscanf_r+0x7e>
 8003e60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f040 808d 	bne.w	8003f82 <__ssvfiscanf_r+0x2d2>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e08f      	b.n	8003f8e <__ssvfiscanf_r+0x2de>
 8003e6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e70:	f042 0220 	orr.w	r2, r2, #32
 8003e74:	9241      	str	r2, [sp, #260]	; 0x104
 8003e76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7c:	9241      	str	r2, [sp, #260]	; 0x104
 8003e7e:	2210      	movs	r2, #16
 8003e80:	2b6f      	cmp	r3, #111	; 0x6f
 8003e82:	bf34      	ite	cc
 8003e84:	2303      	movcc	r3, #3
 8003e86:	2304      	movcs	r3, #4
 8003e88:	9242      	str	r2, [sp, #264]	; 0x108
 8003e8a:	e002      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9342      	str	r3, [sp, #264]	; 0x108
 8003e90:	2303      	movs	r3, #3
 8003e92:	9347      	str	r3, [sp, #284]	; 0x11c
 8003e94:	6863      	ldr	r3, [r4, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	dd3d      	ble.n	8003f16 <__ssvfiscanf_r+0x266>
 8003e9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e9c:	0659      	lsls	r1, r3, #25
 8003e9e:	d404      	bmi.n	8003eaa <__ssvfiscanf_r+0x1fa>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	781a      	ldrb	r2, [r3, #0]
 8003ea4:	5cba      	ldrb	r2, [r7, r2]
 8003ea6:	0712      	lsls	r2, r2, #28
 8003ea8:	d43c      	bmi.n	8003f24 <__ssvfiscanf_r+0x274>
 8003eaa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	dc4b      	bgt.n	8003f48 <__ssvfiscanf_r+0x298>
 8003eb0:	466b      	mov	r3, sp
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	a941      	add	r1, sp, #260	; 0x104
 8003eb8:	f000 fa06 	bl	80042c8 <_scanf_chars>
 8003ebc:	2801      	cmp	r0, #1
 8003ebe:	d06a      	beq.n	8003f96 <__ssvfiscanf_r+0x2e6>
 8003ec0:	2802      	cmp	r0, #2
 8003ec2:	f47f af1b 	bne.w	8003cfc <__ssvfiscanf_r+0x4c>
 8003ec6:	e7cb      	b.n	8003e60 <__ssvfiscanf_r+0x1b0>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	9342      	str	r3, [sp, #264]	; 0x108
 8003ecc:	2304      	movs	r3, #4
 8003ece:	e7e0      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003ed0:	220a      	movs	r2, #10
 8003ed2:	e7d5      	b.n	8003e80 <__ssvfiscanf_r+0x1d0>
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f000 fb42 	bl	8004560 <__sccl>
 8003edc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ede:	4605      	mov	r5, r0
 8003ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee4:	9341      	str	r3, [sp, #260]	; 0x104
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e7d3      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003eea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef0:	9341      	str	r3, [sp, #260]	; 0x104
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e7cd      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e7cb      	b.n	8003e92 <__ssvfiscanf_r+0x1e2>
 8003efa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003efc:	06c3      	lsls	r3, r0, #27
 8003efe:	f53f aefd 	bmi.w	8003cfc <__ssvfiscanf_r+0x4c>
 8003f02:	9b00      	ldr	r3, [sp, #0]
 8003f04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f06:	1d19      	adds	r1, r3, #4
 8003f08:	9100      	str	r1, [sp, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	07c0      	lsls	r0, r0, #31
 8003f0e:	bf4c      	ite	mi
 8003f10:	801a      	strhmi	r2, [r3, #0]
 8003f12:	601a      	strpl	r2, [r3, #0]
 8003f14:	e6f2      	b.n	8003cfc <__ssvfiscanf_r+0x4c>
 8003f16:	4621      	mov	r1, r4
 8003f18:	4630      	mov	r0, r6
 8003f1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f1c:	4798      	blx	r3
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d0bb      	beq.n	8003e9a <__ssvfiscanf_r+0x1ea>
 8003f22:	e79d      	b.n	8003e60 <__ssvfiscanf_r+0x1b0>
 8003f24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f26:	3201      	adds	r2, #1
 8003f28:	9245      	str	r2, [sp, #276]	; 0x114
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	3a01      	subs	r2, #1
 8003f2e:	2a00      	cmp	r2, #0
 8003f30:	6062      	str	r2, [r4, #4]
 8003f32:	dd02      	ble.n	8003f3a <__ssvfiscanf_r+0x28a>
 8003f34:	3301      	adds	r3, #1
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	e7b2      	b.n	8003ea0 <__ssvfiscanf_r+0x1f0>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f40:	4798      	blx	r3
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d0ac      	beq.n	8003ea0 <__ssvfiscanf_r+0x1f0>
 8003f46:	e78b      	b.n	8003e60 <__ssvfiscanf_r+0x1b0>
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	dc0f      	bgt.n	8003f6c <__ssvfiscanf_r+0x2bc>
 8003f4c:	466b      	mov	r3, sp
 8003f4e:	4622      	mov	r2, r4
 8003f50:	4630      	mov	r0, r6
 8003f52:	a941      	add	r1, sp, #260	; 0x104
 8003f54:	f000 fa12 	bl	800437c <_scanf_i>
 8003f58:	e7b0      	b.n	8003ebc <__ssvfiscanf_r+0x20c>
 8003f5a:	bf00      	nop
 8003f5c:	08003bfd 	.word	0x08003bfd
 8003f60:	08003c77 	.word	0x08003c77
 8003f64:	08004ca9 	.word	0x08004ca9
 8003f68:	08004c60 	.word	0x08004c60
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <__ssvfiscanf_r+0x2ec>)
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f43f aec4 	beq.w	8003cfc <__ssvfiscanf_r+0x4c>
 8003f74:	466b      	mov	r3, sp
 8003f76:	4622      	mov	r2, r4
 8003f78:	4630      	mov	r0, r6
 8003f7a:	a941      	add	r1, sp, #260	; 0x104
 8003f7c:	f3af 8000 	nop.w
 8003f80:	e79c      	b.n	8003ebc <__ssvfiscanf_r+0x20c>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f88:	bf18      	it	ne
 8003f8a:	f04f 30ff 	movne.w	r0, #4294967295
 8003f8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f96:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003f98:	e7f9      	b.n	8003f8e <__ssvfiscanf_r+0x2de>
 8003f9a:	bf00      	nop
 8003f9c:	00000000 	.word	0x00000000

08003fa0 <_printf_common>:
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	688a      	ldr	r2, [r1, #8]
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	4607      	mov	r7, r0
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bfb8      	it	lt
 8003fb2:	4613      	movlt	r3, r2
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fba:	460c      	mov	r4, r1
 8003fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fc0:	b10a      	cbz	r2, 8003fc6 <_printf_common+0x26>
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	0699      	lsls	r1, r3, #26
 8003fca:	bf42      	ittt	mi
 8003fcc:	6833      	ldrmi	r3, [r6, #0]
 8003fce:	3302      	addmi	r3, #2
 8003fd0:	6033      	strmi	r3, [r6, #0]
 8003fd2:	6825      	ldr	r5, [r4, #0]
 8003fd4:	f015 0506 	ands.w	r5, r5, #6
 8003fd8:	d106      	bne.n	8003fe8 <_printf_common+0x48>
 8003fda:	f104 0a19 	add.w	sl, r4, #25
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	6832      	ldr	r2, [r6, #0]
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	42ab      	cmp	r3, r5
 8003fe6:	dc2b      	bgt.n	8004040 <_printf_common+0xa0>
 8003fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fec:	1e13      	subs	r3, r2, #0
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	0692      	lsls	r2, r2, #26
 8003ff6:	d430      	bmi.n	800405a <_printf_common+0xba>
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004000:	47c0      	blx	r8
 8004002:	3001      	adds	r0, #1
 8004004:	d023      	beq.n	800404e <_printf_common+0xae>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6922      	ldr	r2, [r4, #16]
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf14      	ite	ne
 8004012:	2500      	movne	r5, #0
 8004014:	6833      	ldreq	r3, [r6, #0]
 8004016:	f04f 0600 	mov.w	r6, #0
 800401a:	bf08      	it	eq
 800401c:	68e5      	ldreq	r5, [r4, #12]
 800401e:	f104 041a 	add.w	r4, r4, #26
 8004022:	bf08      	it	eq
 8004024:	1aed      	subeq	r5, r5, r3
 8004026:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800402a:	bf08      	it	eq
 800402c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004030:	4293      	cmp	r3, r2
 8004032:	bfc4      	itt	gt
 8004034:	1a9b      	subgt	r3, r3, r2
 8004036:	18ed      	addgt	r5, r5, r3
 8004038:	42b5      	cmp	r5, r6
 800403a:	d11a      	bne.n	8004072 <_printf_common+0xd2>
 800403c:	2000      	movs	r0, #0
 800403e:	e008      	b.n	8004052 <_printf_common+0xb2>
 8004040:	2301      	movs	r3, #1
 8004042:	4652      	mov	r2, sl
 8004044:	4649      	mov	r1, r9
 8004046:	4638      	mov	r0, r7
 8004048:	47c0      	blx	r8
 800404a:	3001      	adds	r0, #1
 800404c:	d103      	bne.n	8004056 <_printf_common+0xb6>
 800404e:	f04f 30ff 	mov.w	r0, #4294967295
 8004052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004056:	3501      	adds	r5, #1
 8004058:	e7c1      	b.n	8003fde <_printf_common+0x3e>
 800405a:	2030      	movs	r0, #48	; 0x30
 800405c:	18e1      	adds	r1, r4, r3
 800405e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004068:	4422      	add	r2, r4
 800406a:	3302      	adds	r3, #2
 800406c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004070:	e7c2      	b.n	8003ff8 <_printf_common+0x58>
 8004072:	2301      	movs	r3, #1
 8004074:	4622      	mov	r2, r4
 8004076:	4649      	mov	r1, r9
 8004078:	4638      	mov	r0, r7
 800407a:	47c0      	blx	r8
 800407c:	3001      	adds	r0, #1
 800407e:	d0e6      	beq.n	800404e <_printf_common+0xae>
 8004080:	3601      	adds	r6, #1
 8004082:	e7d9      	b.n	8004038 <_printf_common+0x98>

08004084 <_printf_i>:
 8004084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	7e0f      	ldrb	r7, [r1, #24]
 800408a:	4691      	mov	r9, r2
 800408c:	2f78      	cmp	r7, #120	; 0x78
 800408e:	4680      	mov	r8, r0
 8004090:	460c      	mov	r4, r1
 8004092:	469a      	mov	sl, r3
 8004094:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800409a:	d807      	bhi.n	80040ac <_printf_i+0x28>
 800409c:	2f62      	cmp	r7, #98	; 0x62
 800409e:	d80a      	bhi.n	80040b6 <_printf_i+0x32>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	f000 80d5 	beq.w	8004250 <_printf_i+0x1cc>
 80040a6:	2f58      	cmp	r7, #88	; 0x58
 80040a8:	f000 80c1 	beq.w	800422e <_printf_i+0x1aa>
 80040ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b4:	e03a      	b.n	800412c <_printf_i+0xa8>
 80040b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040ba:	2b15      	cmp	r3, #21
 80040bc:	d8f6      	bhi.n	80040ac <_printf_i+0x28>
 80040be:	a101      	add	r1, pc, #4	; (adr r1, 80040c4 <_printf_i+0x40>)
 80040c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	08004131 	.word	0x08004131
 80040cc:	080040ad 	.word	0x080040ad
 80040d0:	080040ad 	.word	0x080040ad
 80040d4:	080040ad 	.word	0x080040ad
 80040d8:	080040ad 	.word	0x080040ad
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080040ad 	.word	0x080040ad
 80040e4:	080040ad 	.word	0x080040ad
 80040e8:	080040ad 	.word	0x080040ad
 80040ec:	080040ad 	.word	0x080040ad
 80040f0:	08004237 	.word	0x08004237
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	080041f1 	.word	0x080041f1
 80040fc:	080040ad 	.word	0x080040ad
 8004100:	080040ad 	.word	0x080040ad
 8004104:	08004259 	.word	0x08004259
 8004108:	080040ad 	.word	0x080040ad
 800410c:	0800415d 	.word	0x0800415d
 8004110:	080040ad 	.word	0x080040ad
 8004114:	080040ad 	.word	0x080040ad
 8004118:	080041f9 	.word	0x080041f9
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	602a      	str	r2, [r5, #0]
 8004124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800412c:	2301      	movs	r3, #1
 800412e:	e0a0      	b.n	8004272 <_printf_i+0x1ee>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	0607      	lsls	r7, r0, #24
 8004136:	f103 0104 	add.w	r1, r3, #4
 800413a:	6029      	str	r1, [r5, #0]
 800413c:	d501      	bpl.n	8004142 <_printf_i+0xbe>
 800413e:	681e      	ldr	r6, [r3, #0]
 8004140:	e003      	b.n	800414a <_printf_i+0xc6>
 8004142:	0646      	lsls	r6, r0, #25
 8004144:	d5fb      	bpl.n	800413e <_printf_i+0xba>
 8004146:	f9b3 6000 	ldrsh.w	r6, [r3]
 800414a:	2e00      	cmp	r6, #0
 800414c:	da03      	bge.n	8004156 <_printf_i+0xd2>
 800414e:	232d      	movs	r3, #45	; 0x2d
 8004150:	4276      	negs	r6, r6
 8004152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004156:	230a      	movs	r3, #10
 8004158:	4859      	ldr	r0, [pc, #356]	; (80042c0 <_printf_i+0x23c>)
 800415a:	e012      	b.n	8004182 <_printf_i+0xfe>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	1d19      	adds	r1, r3, #4
 8004162:	6029      	str	r1, [r5, #0]
 8004164:	0605      	lsls	r5, r0, #24
 8004166:	d501      	bpl.n	800416c <_printf_i+0xe8>
 8004168:	681e      	ldr	r6, [r3, #0]
 800416a:	e002      	b.n	8004172 <_printf_i+0xee>
 800416c:	0641      	lsls	r1, r0, #25
 800416e:	d5fb      	bpl.n	8004168 <_printf_i+0xe4>
 8004170:	881e      	ldrh	r6, [r3, #0]
 8004172:	2f6f      	cmp	r7, #111	; 0x6f
 8004174:	bf0c      	ite	eq
 8004176:	2308      	moveq	r3, #8
 8004178:	230a      	movne	r3, #10
 800417a:	4851      	ldr	r0, [pc, #324]	; (80042c0 <_printf_i+0x23c>)
 800417c:	2100      	movs	r1, #0
 800417e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004182:	6865      	ldr	r5, [r4, #4]
 8004184:	2d00      	cmp	r5, #0
 8004186:	bfa8      	it	ge
 8004188:	6821      	ldrge	r1, [r4, #0]
 800418a:	60a5      	str	r5, [r4, #8]
 800418c:	bfa4      	itt	ge
 800418e:	f021 0104 	bicge.w	r1, r1, #4
 8004192:	6021      	strge	r1, [r4, #0]
 8004194:	b90e      	cbnz	r6, 800419a <_printf_i+0x116>
 8004196:	2d00      	cmp	r5, #0
 8004198:	d04b      	beq.n	8004232 <_printf_i+0x1ae>
 800419a:	4615      	mov	r5, r2
 800419c:	fbb6 f1f3 	udiv	r1, r6, r3
 80041a0:	fb03 6711 	mls	r7, r3, r1, r6
 80041a4:	5dc7      	ldrb	r7, [r0, r7]
 80041a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041aa:	4637      	mov	r7, r6
 80041ac:	42bb      	cmp	r3, r7
 80041ae:	460e      	mov	r6, r1
 80041b0:	d9f4      	bls.n	800419c <_printf_i+0x118>
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d10b      	bne.n	80041ce <_printf_i+0x14a>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	07de      	lsls	r6, r3, #31
 80041ba:	d508      	bpl.n	80041ce <_printf_i+0x14a>
 80041bc:	6923      	ldr	r3, [r4, #16]
 80041be:	6861      	ldr	r1, [r4, #4]
 80041c0:	4299      	cmp	r1, r3
 80041c2:	bfde      	ittt	le
 80041c4:	2330      	movle	r3, #48	; 0x30
 80041c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	6122      	str	r2, [r4, #16]
 80041d2:	464b      	mov	r3, r9
 80041d4:	4621      	mov	r1, r4
 80041d6:	4640      	mov	r0, r8
 80041d8:	f8cd a000 	str.w	sl, [sp]
 80041dc:	aa03      	add	r2, sp, #12
 80041de:	f7ff fedf 	bl	8003fa0 <_printf_common>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d14a      	bne.n	800427c <_printf_i+0x1f8>
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	b004      	add	sp, #16
 80041ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	2778      	movs	r7, #120	; 0x78
 80041fa:	4832      	ldr	r0, [pc, #200]	; (80042c4 <_printf_i+0x240>)
 80041fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	6829      	ldr	r1, [r5, #0]
 8004204:	061f      	lsls	r7, r3, #24
 8004206:	f851 6b04 	ldr.w	r6, [r1], #4
 800420a:	d402      	bmi.n	8004212 <_printf_i+0x18e>
 800420c:	065f      	lsls	r7, r3, #25
 800420e:	bf48      	it	mi
 8004210:	b2b6      	uxthmi	r6, r6
 8004212:	07df      	lsls	r7, r3, #31
 8004214:	bf48      	it	mi
 8004216:	f043 0320 	orrmi.w	r3, r3, #32
 800421a:	6029      	str	r1, [r5, #0]
 800421c:	bf48      	it	mi
 800421e:	6023      	strmi	r3, [r4, #0]
 8004220:	b91e      	cbnz	r6, 800422a <_printf_i+0x1a6>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	f023 0320 	bic.w	r3, r3, #32
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	2310      	movs	r3, #16
 800422c:	e7a6      	b.n	800417c <_printf_i+0xf8>
 800422e:	4824      	ldr	r0, [pc, #144]	; (80042c0 <_printf_i+0x23c>)
 8004230:	e7e4      	b.n	80041fc <_printf_i+0x178>
 8004232:	4615      	mov	r5, r2
 8004234:	e7bd      	b.n	80041b2 <_printf_i+0x12e>
 8004236:	682b      	ldr	r3, [r5, #0]
 8004238:	6826      	ldr	r6, [r4, #0]
 800423a:	1d18      	adds	r0, r3, #4
 800423c:	6961      	ldr	r1, [r4, #20]
 800423e:	6028      	str	r0, [r5, #0]
 8004240:	0635      	lsls	r5, r6, #24
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	d501      	bpl.n	800424a <_printf_i+0x1c6>
 8004246:	6019      	str	r1, [r3, #0]
 8004248:	e002      	b.n	8004250 <_printf_i+0x1cc>
 800424a:	0670      	lsls	r0, r6, #25
 800424c:	d5fb      	bpl.n	8004246 <_printf_i+0x1c2>
 800424e:	8019      	strh	r1, [r3, #0]
 8004250:	2300      	movs	r3, #0
 8004252:	4615      	mov	r5, r2
 8004254:	6123      	str	r3, [r4, #16]
 8004256:	e7bc      	b.n	80041d2 <_printf_i+0x14e>
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	2100      	movs	r1, #0
 800425c:	1d1a      	adds	r2, r3, #4
 800425e:	602a      	str	r2, [r5, #0]
 8004260:	681d      	ldr	r5, [r3, #0]
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	4628      	mov	r0, r5
 8004266:	f000 fa17 	bl	8004698 <memchr>
 800426a:	b108      	cbz	r0, 8004270 <_printf_i+0x1ec>
 800426c:	1b40      	subs	r0, r0, r5
 800426e:	6060      	str	r0, [r4, #4]
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	2300      	movs	r3, #0
 8004276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427a:	e7aa      	b.n	80041d2 <_printf_i+0x14e>
 800427c:	462a      	mov	r2, r5
 800427e:	4649      	mov	r1, r9
 8004280:	4640      	mov	r0, r8
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	47d0      	blx	sl
 8004286:	3001      	adds	r0, #1
 8004288:	d0ad      	beq.n	80041e6 <_printf_i+0x162>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	079b      	lsls	r3, r3, #30
 800428e:	d413      	bmi.n	80042b8 <_printf_i+0x234>
 8004290:	68e0      	ldr	r0, [r4, #12]
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	4298      	cmp	r0, r3
 8004296:	bfb8      	it	lt
 8004298:	4618      	movlt	r0, r3
 800429a:	e7a6      	b.n	80041ea <_printf_i+0x166>
 800429c:	2301      	movs	r3, #1
 800429e:	4632      	mov	r2, r6
 80042a0:	4649      	mov	r1, r9
 80042a2:	4640      	mov	r0, r8
 80042a4:	47d0      	blx	sl
 80042a6:	3001      	adds	r0, #1
 80042a8:	d09d      	beq.n	80041e6 <_printf_i+0x162>
 80042aa:	3501      	adds	r5, #1
 80042ac:	68e3      	ldr	r3, [r4, #12]
 80042ae:	9903      	ldr	r1, [sp, #12]
 80042b0:	1a5b      	subs	r3, r3, r1
 80042b2:	42ab      	cmp	r3, r5
 80042b4:	dcf2      	bgt.n	800429c <_printf_i+0x218>
 80042b6:	e7eb      	b.n	8004290 <_printf_i+0x20c>
 80042b8:	2500      	movs	r5, #0
 80042ba:	f104 0619 	add.w	r6, r4, #25
 80042be:	e7f5      	b.n	80042ac <_printf_i+0x228>
 80042c0:	08004c6b 	.word	0x08004c6b
 80042c4:	08004c7c 	.word	0x08004c7c

080042c8 <_scanf_chars>:
 80042c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042cc:	4615      	mov	r5, r2
 80042ce:	688a      	ldr	r2, [r1, #8]
 80042d0:	4680      	mov	r8, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	b932      	cbnz	r2, 80042e4 <_scanf_chars+0x1c>
 80042d6:	698a      	ldr	r2, [r1, #24]
 80042d8:	2a00      	cmp	r2, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2201      	moveq	r2, #1
 80042de:	f04f 32ff 	movne.w	r2, #4294967295
 80042e2:	608a      	str	r2, [r1, #8]
 80042e4:	2700      	movs	r7, #0
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004378 <_scanf_chars+0xb0>
 80042ec:	06d1      	lsls	r1, r2, #27
 80042ee:	bf5f      	itttt	pl
 80042f0:	681a      	ldrpl	r2, [r3, #0]
 80042f2:	1d11      	addpl	r1, r2, #4
 80042f4:	6019      	strpl	r1, [r3, #0]
 80042f6:	6816      	ldrpl	r6, [r2, #0]
 80042f8:	69a0      	ldr	r0, [r4, #24]
 80042fa:	b188      	cbz	r0, 8004320 <_scanf_chars+0x58>
 80042fc:	2801      	cmp	r0, #1
 80042fe:	d107      	bne.n	8004310 <_scanf_chars+0x48>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	781a      	ldrb	r2, [r3, #0]
 8004304:	6963      	ldr	r3, [r4, #20]
 8004306:	5c9b      	ldrb	r3, [r3, r2]
 8004308:	b953      	cbnz	r3, 8004320 <_scanf_chars+0x58>
 800430a:	2f00      	cmp	r7, #0
 800430c:	d031      	beq.n	8004372 <_scanf_chars+0xaa>
 800430e:	e022      	b.n	8004356 <_scanf_chars+0x8e>
 8004310:	2802      	cmp	r0, #2
 8004312:	d120      	bne.n	8004356 <_scanf_chars+0x8e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f819 3003 	ldrb.w	r3, [r9, r3]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	d41a      	bmi.n	8004356 <_scanf_chars+0x8e>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	3701      	adds	r7, #1
 8004324:	06da      	lsls	r2, r3, #27
 8004326:	bf5e      	ittt	pl
 8004328:	682b      	ldrpl	r3, [r5, #0]
 800432a:	781b      	ldrbpl	r3, [r3, #0]
 800432c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004330:	682a      	ldr	r2, [r5, #0]
 8004332:	686b      	ldr	r3, [r5, #4]
 8004334:	3201      	adds	r2, #1
 8004336:	602a      	str	r2, [r5, #0]
 8004338:	68a2      	ldr	r2, [r4, #8]
 800433a:	3b01      	subs	r3, #1
 800433c:	3a01      	subs	r2, #1
 800433e:	606b      	str	r3, [r5, #4]
 8004340:	60a2      	str	r2, [r4, #8]
 8004342:	b142      	cbz	r2, 8004356 <_scanf_chars+0x8e>
 8004344:	2b00      	cmp	r3, #0
 8004346:	dcd7      	bgt.n	80042f8 <_scanf_chars+0x30>
 8004348:	4629      	mov	r1, r5
 800434a:	4640      	mov	r0, r8
 800434c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004350:	4798      	blx	r3
 8004352:	2800      	cmp	r0, #0
 8004354:	d0d0      	beq.n	80042f8 <_scanf_chars+0x30>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f013 0310 	ands.w	r3, r3, #16
 800435c:	d105      	bne.n	800436a <_scanf_chars+0xa2>
 800435e:	68e2      	ldr	r2, [r4, #12]
 8004360:	3201      	adds	r2, #1
 8004362:	60e2      	str	r2, [r4, #12]
 8004364:	69a2      	ldr	r2, [r4, #24]
 8004366:	b102      	cbz	r2, 800436a <_scanf_chars+0xa2>
 8004368:	7033      	strb	r3, [r6, #0]
 800436a:	2000      	movs	r0, #0
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	443b      	add	r3, r7
 8004370:	6123      	str	r3, [r4, #16]
 8004372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004376:	bf00      	nop
 8004378:	08004ca9 	.word	0x08004ca9

0800437c <_scanf_i>:
 800437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004380:	460c      	mov	r4, r1
 8004382:	4698      	mov	r8, r3
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <_scanf_i+0x1d4>)
 8004386:	b087      	sub	sp, #28
 8004388:	4682      	mov	sl, r0
 800438a:	4616      	mov	r6, r2
 800438c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004390:	ab03      	add	r3, sp, #12
 8004392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004396:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <_scanf_i+0x1d8>)
 8004398:	69a1      	ldr	r1, [r4, #24]
 800439a:	4a6f      	ldr	r2, [pc, #444]	; (8004558 <_scanf_i+0x1dc>)
 800439c:	4627      	mov	r7, r4
 800439e:	2903      	cmp	r1, #3
 80043a0:	bf18      	it	ne
 80043a2:	461a      	movne	r2, r3
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	9201      	str	r2, [sp, #4]
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043ae:	bf81      	itttt	hi
 80043b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043b4:	eb03 0905 	addhi.w	r9, r3, r5
 80043b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043bc:	60a3      	strhi	r3, [r4, #8]
 80043be:	f857 3b1c 	ldr.w	r3, [r7], #28
 80043c2:	bf98      	it	ls
 80043c4:	f04f 0900 	movls.w	r9, #0
 80043c8:	463d      	mov	r5, r7
 80043ca:	f04f 0b00 	mov.w	fp, #0
 80043ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	6831      	ldr	r1, [r6, #0]
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	2202      	movs	r2, #2
 80043da:	7809      	ldrb	r1, [r1, #0]
 80043dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80043e0:	f000 f95a 	bl	8004698 <memchr>
 80043e4:	b328      	cbz	r0, 8004432 <_scanf_i+0xb6>
 80043e6:	f1bb 0f01 	cmp.w	fp, #1
 80043ea:	d159      	bne.n	80044a0 <_scanf_i+0x124>
 80043ec:	6862      	ldr	r2, [r4, #4]
 80043ee:	b92a      	cbnz	r2, 80043fc <_scanf_i+0x80>
 80043f0:	2308      	movs	r3, #8
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	6822      	ldr	r2, [r4, #0]
 80043fe:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004402:	6022      	str	r2, [r4, #0]
 8004404:	68a2      	ldr	r2, [r4, #8]
 8004406:	1e51      	subs	r1, r2, #1
 8004408:	60a1      	str	r1, [r4, #8]
 800440a:	b192      	cbz	r2, 8004432 <_scanf_i+0xb6>
 800440c:	6832      	ldr	r2, [r6, #0]
 800440e:	1c51      	adds	r1, r2, #1
 8004410:	6031      	str	r1, [r6, #0]
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	f805 2b01 	strb.w	r2, [r5], #1
 8004418:	6872      	ldr	r2, [r6, #4]
 800441a:	3a01      	subs	r2, #1
 800441c:	2a00      	cmp	r2, #0
 800441e:	6072      	str	r2, [r6, #4]
 8004420:	dc07      	bgt.n	8004432 <_scanf_i+0xb6>
 8004422:	4631      	mov	r1, r6
 8004424:	4650      	mov	r0, sl
 8004426:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800442a:	4790      	blx	r2
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 8085 	bne.w	800453c <_scanf_i+0x1c0>
 8004432:	f10b 0b01 	add.w	fp, fp, #1
 8004436:	f1bb 0f03 	cmp.w	fp, #3
 800443a:	d1cb      	bne.n	80043d4 <_scanf_i+0x58>
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	b90b      	cbnz	r3, 8004444 <_scanf_i+0xc8>
 8004440:	230a      	movs	r3, #10
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	4945      	ldr	r1, [pc, #276]	; (800455c <_scanf_i+0x1e0>)
 8004448:	6960      	ldr	r0, [r4, #20]
 800444a:	1ac9      	subs	r1, r1, r3
 800444c:	f000 f888 	bl	8004560 <__sccl>
 8004450:	f04f 0b00 	mov.w	fp, #0
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d03d      	beq.n	80044d8 <_scanf_i+0x15c>
 800445c:	6831      	ldr	r1, [r6, #0]
 800445e:	6960      	ldr	r0, [r4, #20]
 8004460:	f891 c000 	ldrb.w	ip, [r1]
 8004464:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004468:	2800      	cmp	r0, #0
 800446a:	d035      	beq.n	80044d8 <_scanf_i+0x15c>
 800446c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004470:	d124      	bne.n	80044bc <_scanf_i+0x140>
 8004472:	0510      	lsls	r0, r2, #20
 8004474:	d522      	bpl.n	80044bc <_scanf_i+0x140>
 8004476:	f10b 0b01 	add.w	fp, fp, #1
 800447a:	f1b9 0f00 	cmp.w	r9, #0
 800447e:	d003      	beq.n	8004488 <_scanf_i+0x10c>
 8004480:	3301      	adds	r3, #1
 8004482:	f109 39ff 	add.w	r9, r9, #4294967295
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	6873      	ldr	r3, [r6, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	6073      	str	r3, [r6, #4]
 8004490:	dd1b      	ble.n	80044ca <_scanf_i+0x14e>
 8004492:	6833      	ldr	r3, [r6, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	3b01      	subs	r3, #1
 800449c:	60a3      	str	r3, [r4, #8]
 800449e:	e7d9      	b.n	8004454 <_scanf_i+0xd8>
 80044a0:	f1bb 0f02 	cmp.w	fp, #2
 80044a4:	d1ae      	bne.n	8004404 <_scanf_i+0x88>
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80044ac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80044b0:	d1bf      	bne.n	8004432 <_scanf_i+0xb6>
 80044b2:	2310      	movs	r3, #16
 80044b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b8:	6063      	str	r3, [r4, #4]
 80044ba:	e7a2      	b.n	8004402 <_scanf_i+0x86>
 80044bc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	780b      	ldrb	r3, [r1, #0]
 80044c4:	f805 3b01 	strb.w	r3, [r5], #1
 80044c8:	e7de      	b.n	8004488 <_scanf_i+0x10c>
 80044ca:	4631      	mov	r1, r6
 80044cc:	4650      	mov	r0, sl
 80044ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80044d2:	4798      	blx	r3
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d0df      	beq.n	8004498 <_scanf_i+0x11c>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	05d9      	lsls	r1, r3, #23
 80044dc:	d50d      	bpl.n	80044fa <_scanf_i+0x17e>
 80044de:	42bd      	cmp	r5, r7
 80044e0:	d909      	bls.n	80044f6 <_scanf_i+0x17a>
 80044e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80044e6:	4632      	mov	r2, r6
 80044e8:	4650      	mov	r0, sl
 80044ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80044f2:	4798      	blx	r3
 80044f4:	464d      	mov	r5, r9
 80044f6:	42bd      	cmp	r5, r7
 80044f8:	d028      	beq.n	800454c <_scanf_i+0x1d0>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	f012 0210 	ands.w	r2, r2, #16
 8004500:	d113      	bne.n	800452a <_scanf_i+0x1ae>
 8004502:	702a      	strb	r2, [r5, #0]
 8004504:	4639      	mov	r1, r7
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	4650      	mov	r0, sl
 800450a:	9e01      	ldr	r6, [sp, #4]
 800450c:	47b0      	blx	r6
 800450e:	f8d8 3000 	ldr.w	r3, [r8]
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	f8c8 2000 	str.w	r2, [r8]
 800451a:	f011 0f20 	tst.w	r1, #32
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	d00f      	beq.n	8004542 <_scanf_i+0x1c6>
 8004522:	6018      	str	r0, [r3, #0]
 8004524:	68e3      	ldr	r3, [r4, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60e3      	str	r3, [r4, #12]
 800452a:	2000      	movs	r0, #0
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	1bed      	subs	r5, r5, r7
 8004530:	445d      	add	r5, fp
 8004532:	442b      	add	r3, r5
 8004534:	6123      	str	r3, [r4, #16]
 8004536:	b007      	add	sp, #28
 8004538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453c:	f04f 0b00 	mov.w	fp, #0
 8004540:	e7ca      	b.n	80044d8 <_scanf_i+0x15c>
 8004542:	07ca      	lsls	r2, r1, #31
 8004544:	bf4c      	ite	mi
 8004546:	8018      	strhmi	r0, [r3, #0]
 8004548:	6018      	strpl	r0, [r3, #0]
 800454a:	e7eb      	b.n	8004524 <_scanf_i+0x1a8>
 800454c:	2001      	movs	r0, #1
 800454e:	e7f2      	b.n	8004536 <_scanf_i+0x1ba>
 8004550:	08004c10 	.word	0x08004c10
 8004554:	08004915 	.word	0x08004915
 8004558:	0800482d 	.word	0x0800482d
 800455c:	08004c9d 	.word	0x08004c9d

08004560 <__sccl>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	780b      	ldrb	r3, [r1, #0]
 8004564:	4604      	mov	r4, r0
 8004566:	2b5e      	cmp	r3, #94	; 0x5e
 8004568:	bf0b      	itete	eq
 800456a:	784b      	ldrbeq	r3, [r1, #1]
 800456c:	1c4a      	addne	r2, r1, #1
 800456e:	1c8a      	addeq	r2, r1, #2
 8004570:	2100      	movne	r1, #0
 8004572:	bf08      	it	eq
 8004574:	2101      	moveq	r1, #1
 8004576:	3801      	subs	r0, #1
 8004578:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800457c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004580:	42a8      	cmp	r0, r5
 8004582:	d1fb      	bne.n	800457c <__sccl+0x1c>
 8004584:	b90b      	cbnz	r3, 800458a <__sccl+0x2a>
 8004586:	1e50      	subs	r0, r2, #1
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	f081 0101 	eor.w	r1, r1, #1
 800458e:	4610      	mov	r0, r2
 8004590:	54e1      	strb	r1, [r4, r3]
 8004592:	4602      	mov	r2, r0
 8004594:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004598:	2d2d      	cmp	r5, #45	; 0x2d
 800459a:	d005      	beq.n	80045a8 <__sccl+0x48>
 800459c:	2d5d      	cmp	r5, #93	; 0x5d
 800459e:	d016      	beq.n	80045ce <__sccl+0x6e>
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	d0f1      	beq.n	8004588 <__sccl+0x28>
 80045a4:	462b      	mov	r3, r5
 80045a6:	e7f2      	b.n	800458e <__sccl+0x2e>
 80045a8:	7846      	ldrb	r6, [r0, #1]
 80045aa:	2e5d      	cmp	r6, #93	; 0x5d
 80045ac:	d0fa      	beq.n	80045a4 <__sccl+0x44>
 80045ae:	42b3      	cmp	r3, r6
 80045b0:	dcf8      	bgt.n	80045a4 <__sccl+0x44>
 80045b2:	461a      	mov	r2, r3
 80045b4:	3002      	adds	r0, #2
 80045b6:	3201      	adds	r2, #1
 80045b8:	4296      	cmp	r6, r2
 80045ba:	54a1      	strb	r1, [r4, r2]
 80045bc:	dcfb      	bgt.n	80045b6 <__sccl+0x56>
 80045be:	1af2      	subs	r2, r6, r3
 80045c0:	3a01      	subs	r2, #1
 80045c2:	42b3      	cmp	r3, r6
 80045c4:	bfa8      	it	ge
 80045c6:	2200      	movge	r2, #0
 80045c8:	1c5d      	adds	r5, r3, #1
 80045ca:	18ab      	adds	r3, r5, r2
 80045cc:	e7e1      	b.n	8004592 <__sccl+0x32>
 80045ce:	4610      	mov	r0, r2
 80045d0:	e7da      	b.n	8004588 <__sccl+0x28>

080045d2 <__submore>:
 80045d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	460c      	mov	r4, r1
 80045d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80045da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045de:	4299      	cmp	r1, r3
 80045e0:	d11b      	bne.n	800461a <__submore+0x48>
 80045e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045e6:	f7ff f925 	bl	8003834 <_malloc_r>
 80045ea:	b918      	cbnz	r0, 80045f4 <__submore+0x22>
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80045fa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80045fe:	6360      	str	r0, [r4, #52]	; 0x34
 8004600:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004604:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004608:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800460c:	7043      	strb	r3, [r0, #1]
 800460e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004612:	7003      	strb	r3, [r0, #0]
 8004614:	6020      	str	r0, [r4, #0]
 8004616:	2000      	movs	r0, #0
 8004618:	e7ea      	b.n	80045f0 <__submore+0x1e>
 800461a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800461c:	0077      	lsls	r7, r6, #1
 800461e:	463a      	mov	r2, r7
 8004620:	f000 f856 	bl	80046d0 <_realloc_r>
 8004624:	4605      	mov	r5, r0
 8004626:	2800      	cmp	r0, #0
 8004628:	d0e0      	beq.n	80045ec <__submore+0x1a>
 800462a:	eb00 0806 	add.w	r8, r0, r6
 800462e:	4601      	mov	r1, r0
 8004630:	4632      	mov	r2, r6
 8004632:	4640      	mov	r0, r8
 8004634:	f000 f83e 	bl	80046b4 <memcpy>
 8004638:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800463c:	f8c4 8000 	str.w	r8, [r4]
 8004640:	e7e9      	b.n	8004616 <__submore+0x44>

08004642 <memmove>:
 8004642:	4288      	cmp	r0, r1
 8004644:	b510      	push	{r4, lr}
 8004646:	eb01 0402 	add.w	r4, r1, r2
 800464a:	d902      	bls.n	8004652 <memmove+0x10>
 800464c:	4284      	cmp	r4, r0
 800464e:	4623      	mov	r3, r4
 8004650:	d807      	bhi.n	8004662 <memmove+0x20>
 8004652:	1e43      	subs	r3, r0, #1
 8004654:	42a1      	cmp	r1, r4
 8004656:	d008      	beq.n	800466a <memmove+0x28>
 8004658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004660:	e7f8      	b.n	8004654 <memmove+0x12>
 8004662:	4601      	mov	r1, r0
 8004664:	4402      	add	r2, r0
 8004666:	428a      	cmp	r2, r1
 8004668:	d100      	bne.n	800466c <memmove+0x2a>
 800466a:	bd10      	pop	{r4, pc}
 800466c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004670:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004674:	e7f7      	b.n	8004666 <memmove+0x24>
	...

08004678 <_sbrk_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	2300      	movs	r3, #0
 800467c:	4d05      	ldr	r5, [pc, #20]	; (8004694 <_sbrk_r+0x1c>)
 800467e:	4604      	mov	r4, r0
 8004680:	4608      	mov	r0, r1
 8004682:	602b      	str	r3, [r5, #0]
 8004684:	f7fc f98c 	bl	80009a0 <_sbrk>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_sbrk_r+0x1a>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	b103      	cbz	r3, 8004692 <_sbrk_r+0x1a>
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	200002e0 	.word	0x200002e0

08004698 <memchr>:
 8004698:	4603      	mov	r3, r0
 800469a:	b510      	push	{r4, lr}
 800469c:	b2c9      	uxtb	r1, r1
 800469e:	4402      	add	r2, r0
 80046a0:	4293      	cmp	r3, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	d101      	bne.n	80046aa <memchr+0x12>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e003      	b.n	80046b2 <memchr+0x1a>
 80046aa:	7804      	ldrb	r4, [r0, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	428c      	cmp	r4, r1
 80046b0:	d1f6      	bne.n	80046a0 <memchr+0x8>
 80046b2:	bd10      	pop	{r4, pc}

080046b4 <memcpy>:
 80046b4:	440a      	add	r2, r1
 80046b6:	4291      	cmp	r1, r2
 80046b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046bc:	d100      	bne.n	80046c0 <memcpy+0xc>
 80046be:	4770      	bx	lr
 80046c0:	b510      	push	{r4, lr}
 80046c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046cc:	d1f9      	bne.n	80046c2 <memcpy+0xe>
 80046ce:	bd10      	pop	{r4, pc}

080046d0 <_realloc_r>:
 80046d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	4680      	mov	r8, r0
 80046d6:	4614      	mov	r4, r2
 80046d8:	460e      	mov	r6, r1
 80046da:	b921      	cbnz	r1, 80046e6 <_realloc_r+0x16>
 80046dc:	4611      	mov	r1, r2
 80046de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046e2:	f7ff b8a7 	b.w	8003834 <_malloc_r>
 80046e6:	b92a      	cbnz	r2, 80046f4 <_realloc_r+0x24>
 80046e8:	f7ff f83c 	bl	8003764 <_free_r>
 80046ec:	4625      	mov	r5, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f4:	f000 f910 	bl	8004918 <_malloc_usable_size_r>
 80046f8:	4284      	cmp	r4, r0
 80046fa:	4607      	mov	r7, r0
 80046fc:	d802      	bhi.n	8004704 <_realloc_r+0x34>
 80046fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004702:	d812      	bhi.n	800472a <_realloc_r+0x5a>
 8004704:	4621      	mov	r1, r4
 8004706:	4640      	mov	r0, r8
 8004708:	f7ff f894 	bl	8003834 <_malloc_r>
 800470c:	4605      	mov	r5, r0
 800470e:	2800      	cmp	r0, #0
 8004710:	d0ed      	beq.n	80046ee <_realloc_r+0x1e>
 8004712:	42bc      	cmp	r4, r7
 8004714:	4622      	mov	r2, r4
 8004716:	4631      	mov	r1, r6
 8004718:	bf28      	it	cs
 800471a:	463a      	movcs	r2, r7
 800471c:	f7ff ffca 	bl	80046b4 <memcpy>
 8004720:	4631      	mov	r1, r6
 8004722:	4640      	mov	r0, r8
 8004724:	f7ff f81e 	bl	8003764 <_free_r>
 8004728:	e7e1      	b.n	80046ee <_realloc_r+0x1e>
 800472a:	4635      	mov	r5, r6
 800472c:	e7df      	b.n	80046ee <_realloc_r+0x1e>
	...

08004730 <_strtol_l.constprop.0>:
 8004730:	2b01      	cmp	r3, #1
 8004732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004736:	4686      	mov	lr, r0
 8004738:	4690      	mov	r8, r2
 800473a:	d001      	beq.n	8004740 <_strtol_l.constprop.0+0x10>
 800473c:	2b24      	cmp	r3, #36	; 0x24
 800473e:	d906      	bls.n	800474e <_strtol_l.constprop.0+0x1e>
 8004740:	f7fe ffe4 	bl	800370c <__errno>
 8004744:	2316      	movs	r3, #22
 8004746:	6003      	str	r3, [r0, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474e:	460d      	mov	r5, r1
 8004750:	4835      	ldr	r0, [pc, #212]	; (8004828 <_strtol_l.constprop.0+0xf8>)
 8004752:	462a      	mov	r2, r5
 8004754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004758:	5d06      	ldrb	r6, [r0, r4]
 800475a:	f016 0608 	ands.w	r6, r6, #8
 800475e:	d1f8      	bne.n	8004752 <_strtol_l.constprop.0+0x22>
 8004760:	2c2d      	cmp	r4, #45	; 0x2d
 8004762:	d12e      	bne.n	80047c2 <_strtol_l.constprop.0+0x92>
 8004764:	2601      	movs	r6, #1
 8004766:	782c      	ldrb	r4, [r5, #0]
 8004768:	1c95      	adds	r5, r2, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d057      	beq.n	800481e <_strtol_l.constprop.0+0xee>
 800476e:	2b10      	cmp	r3, #16
 8004770:	d109      	bne.n	8004786 <_strtol_l.constprop.0+0x56>
 8004772:	2c30      	cmp	r4, #48	; 0x30
 8004774:	d107      	bne.n	8004786 <_strtol_l.constprop.0+0x56>
 8004776:	782a      	ldrb	r2, [r5, #0]
 8004778:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800477c:	2a58      	cmp	r2, #88	; 0x58
 800477e:	d149      	bne.n	8004814 <_strtol_l.constprop.0+0xe4>
 8004780:	2310      	movs	r3, #16
 8004782:	786c      	ldrb	r4, [r5, #1]
 8004784:	3502      	adds	r5, #2
 8004786:	2200      	movs	r2, #0
 8004788:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800478c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004790:	fbbc f9f3 	udiv	r9, ip, r3
 8004794:	4610      	mov	r0, r2
 8004796:	fb03 ca19 	mls	sl, r3, r9, ip
 800479a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800479e:	2f09      	cmp	r7, #9
 80047a0:	d814      	bhi.n	80047cc <_strtol_l.constprop.0+0x9c>
 80047a2:	463c      	mov	r4, r7
 80047a4:	42a3      	cmp	r3, r4
 80047a6:	dd20      	ble.n	80047ea <_strtol_l.constprop.0+0xba>
 80047a8:	1c57      	adds	r7, r2, #1
 80047aa:	d007      	beq.n	80047bc <_strtol_l.constprop.0+0x8c>
 80047ac:	4581      	cmp	r9, r0
 80047ae:	d319      	bcc.n	80047e4 <_strtol_l.constprop.0+0xb4>
 80047b0:	d101      	bne.n	80047b6 <_strtol_l.constprop.0+0x86>
 80047b2:	45a2      	cmp	sl, r4
 80047b4:	db16      	blt.n	80047e4 <_strtol_l.constprop.0+0xb4>
 80047b6:	2201      	movs	r2, #1
 80047b8:	fb00 4003 	mla	r0, r0, r3, r4
 80047bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047c0:	e7eb      	b.n	800479a <_strtol_l.constprop.0+0x6a>
 80047c2:	2c2b      	cmp	r4, #43	; 0x2b
 80047c4:	bf04      	itt	eq
 80047c6:	782c      	ldrbeq	r4, [r5, #0]
 80047c8:	1c95      	addeq	r5, r2, #2
 80047ca:	e7ce      	b.n	800476a <_strtol_l.constprop.0+0x3a>
 80047cc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80047d0:	2f19      	cmp	r7, #25
 80047d2:	d801      	bhi.n	80047d8 <_strtol_l.constprop.0+0xa8>
 80047d4:	3c37      	subs	r4, #55	; 0x37
 80047d6:	e7e5      	b.n	80047a4 <_strtol_l.constprop.0+0x74>
 80047d8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80047dc:	2f19      	cmp	r7, #25
 80047de:	d804      	bhi.n	80047ea <_strtol_l.constprop.0+0xba>
 80047e0:	3c57      	subs	r4, #87	; 0x57
 80047e2:	e7df      	b.n	80047a4 <_strtol_l.constprop.0+0x74>
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
 80047e8:	e7e8      	b.n	80047bc <_strtol_l.constprop.0+0x8c>
 80047ea:	1c53      	adds	r3, r2, #1
 80047ec:	d108      	bne.n	8004800 <_strtol_l.constprop.0+0xd0>
 80047ee:	2322      	movs	r3, #34	; 0x22
 80047f0:	4660      	mov	r0, ip
 80047f2:	f8ce 3000 	str.w	r3, [lr]
 80047f6:	f1b8 0f00 	cmp.w	r8, #0
 80047fa:	d0a6      	beq.n	800474a <_strtol_l.constprop.0+0x1a>
 80047fc:	1e69      	subs	r1, r5, #1
 80047fe:	e006      	b.n	800480e <_strtol_l.constprop.0+0xde>
 8004800:	b106      	cbz	r6, 8004804 <_strtol_l.constprop.0+0xd4>
 8004802:	4240      	negs	r0, r0
 8004804:	f1b8 0f00 	cmp.w	r8, #0
 8004808:	d09f      	beq.n	800474a <_strtol_l.constprop.0+0x1a>
 800480a:	2a00      	cmp	r2, #0
 800480c:	d1f6      	bne.n	80047fc <_strtol_l.constprop.0+0xcc>
 800480e:	f8c8 1000 	str.w	r1, [r8]
 8004812:	e79a      	b.n	800474a <_strtol_l.constprop.0+0x1a>
 8004814:	2430      	movs	r4, #48	; 0x30
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1b5      	bne.n	8004786 <_strtol_l.constprop.0+0x56>
 800481a:	2308      	movs	r3, #8
 800481c:	e7b3      	b.n	8004786 <_strtol_l.constprop.0+0x56>
 800481e:	2c30      	cmp	r4, #48	; 0x30
 8004820:	d0a9      	beq.n	8004776 <_strtol_l.constprop.0+0x46>
 8004822:	230a      	movs	r3, #10
 8004824:	e7af      	b.n	8004786 <_strtol_l.constprop.0+0x56>
 8004826:	bf00      	nop
 8004828:	08004ca9 	.word	0x08004ca9

0800482c <_strtol_r>:
 800482c:	f7ff bf80 	b.w	8004730 <_strtol_l.constprop.0>

08004830 <_strtoul_l.constprop.0>:
 8004830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004834:	4686      	mov	lr, r0
 8004836:	460d      	mov	r5, r1
 8004838:	4f35      	ldr	r7, [pc, #212]	; (8004910 <_strtoul_l.constprop.0+0xe0>)
 800483a:	4628      	mov	r0, r5
 800483c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004840:	5d3e      	ldrb	r6, [r7, r4]
 8004842:	f016 0608 	ands.w	r6, r6, #8
 8004846:	d1f8      	bne.n	800483a <_strtoul_l.constprop.0+0xa>
 8004848:	2c2d      	cmp	r4, #45	; 0x2d
 800484a:	d130      	bne.n	80048ae <_strtoul_l.constprop.0+0x7e>
 800484c:	2601      	movs	r6, #1
 800484e:	782c      	ldrb	r4, [r5, #0]
 8004850:	1c85      	adds	r5, r0, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d057      	beq.n	8004906 <_strtoul_l.constprop.0+0xd6>
 8004856:	2b10      	cmp	r3, #16
 8004858:	d109      	bne.n	800486e <_strtoul_l.constprop.0+0x3e>
 800485a:	2c30      	cmp	r4, #48	; 0x30
 800485c:	d107      	bne.n	800486e <_strtoul_l.constprop.0+0x3e>
 800485e:	7828      	ldrb	r0, [r5, #0]
 8004860:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004864:	2858      	cmp	r0, #88	; 0x58
 8004866:	d149      	bne.n	80048fc <_strtoul_l.constprop.0+0xcc>
 8004868:	2310      	movs	r3, #16
 800486a:	786c      	ldrb	r4, [r5, #1]
 800486c:	3502      	adds	r5, #2
 800486e:	f04f 38ff 	mov.w	r8, #4294967295
 8004872:	fbb8 f8f3 	udiv	r8, r8, r3
 8004876:	2700      	movs	r7, #0
 8004878:	fb03 f908 	mul.w	r9, r3, r8
 800487c:	4638      	mov	r0, r7
 800487e:	ea6f 0909 	mvn.w	r9, r9
 8004882:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004886:	f1bc 0f09 	cmp.w	ip, #9
 800488a:	d815      	bhi.n	80048b8 <_strtoul_l.constprop.0+0x88>
 800488c:	4664      	mov	r4, ip
 800488e:	42a3      	cmp	r3, r4
 8004890:	dd23      	ble.n	80048da <_strtoul_l.constprop.0+0xaa>
 8004892:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004896:	d007      	beq.n	80048a8 <_strtoul_l.constprop.0+0x78>
 8004898:	4580      	cmp	r8, r0
 800489a:	d31b      	bcc.n	80048d4 <_strtoul_l.constprop.0+0xa4>
 800489c:	d101      	bne.n	80048a2 <_strtoul_l.constprop.0+0x72>
 800489e:	45a1      	cmp	r9, r4
 80048a0:	db18      	blt.n	80048d4 <_strtoul_l.constprop.0+0xa4>
 80048a2:	2701      	movs	r7, #1
 80048a4:	fb00 4003 	mla	r0, r0, r3, r4
 80048a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ac:	e7e9      	b.n	8004882 <_strtoul_l.constprop.0+0x52>
 80048ae:	2c2b      	cmp	r4, #43	; 0x2b
 80048b0:	bf04      	itt	eq
 80048b2:	782c      	ldrbeq	r4, [r5, #0]
 80048b4:	1c85      	addeq	r5, r0, #2
 80048b6:	e7cc      	b.n	8004852 <_strtoul_l.constprop.0+0x22>
 80048b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80048bc:	f1bc 0f19 	cmp.w	ip, #25
 80048c0:	d801      	bhi.n	80048c6 <_strtoul_l.constprop.0+0x96>
 80048c2:	3c37      	subs	r4, #55	; 0x37
 80048c4:	e7e3      	b.n	800488e <_strtoul_l.constprop.0+0x5e>
 80048c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80048ca:	f1bc 0f19 	cmp.w	ip, #25
 80048ce:	d804      	bhi.n	80048da <_strtoul_l.constprop.0+0xaa>
 80048d0:	3c57      	subs	r4, #87	; 0x57
 80048d2:	e7dc      	b.n	800488e <_strtoul_l.constprop.0+0x5e>
 80048d4:	f04f 37ff 	mov.w	r7, #4294967295
 80048d8:	e7e6      	b.n	80048a8 <_strtoul_l.constprop.0+0x78>
 80048da:	1c7b      	adds	r3, r7, #1
 80048dc:	d106      	bne.n	80048ec <_strtoul_l.constprop.0+0xbc>
 80048de:	2322      	movs	r3, #34	; 0x22
 80048e0:	4638      	mov	r0, r7
 80048e2:	f8ce 3000 	str.w	r3, [lr]
 80048e6:	b932      	cbnz	r2, 80048f6 <_strtoul_l.constprop.0+0xc6>
 80048e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048ec:	b106      	cbz	r6, 80048f0 <_strtoul_l.constprop.0+0xc0>
 80048ee:	4240      	negs	r0, r0
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	d0f9      	beq.n	80048e8 <_strtoul_l.constprop.0+0xb8>
 80048f4:	b107      	cbz	r7, 80048f8 <_strtoul_l.constprop.0+0xc8>
 80048f6:	1e69      	subs	r1, r5, #1
 80048f8:	6011      	str	r1, [r2, #0]
 80048fa:	e7f5      	b.n	80048e8 <_strtoul_l.constprop.0+0xb8>
 80048fc:	2430      	movs	r4, #48	; 0x30
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1b5      	bne.n	800486e <_strtoul_l.constprop.0+0x3e>
 8004902:	2308      	movs	r3, #8
 8004904:	e7b3      	b.n	800486e <_strtoul_l.constprop.0+0x3e>
 8004906:	2c30      	cmp	r4, #48	; 0x30
 8004908:	d0a9      	beq.n	800485e <_strtoul_l.constprop.0+0x2e>
 800490a:	230a      	movs	r3, #10
 800490c:	e7af      	b.n	800486e <_strtoul_l.constprop.0+0x3e>
 800490e:	bf00      	nop
 8004910:	08004ca9 	.word	0x08004ca9

08004914 <_strtoul_r>:
 8004914:	f7ff bf8c 	b.w	8004830 <_strtoul_l.constprop.0>

08004918 <_malloc_usable_size_r>:
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f18      	subs	r0, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfbc      	itt	lt
 8004922:	580b      	ldrlt	r3, [r1, r0]
 8004924:	18c0      	addlt	r0, r0, r3
 8004926:	4770      	bx	lr

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
